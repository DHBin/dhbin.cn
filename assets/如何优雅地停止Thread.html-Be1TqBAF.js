import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as o,a as n,b as s,d as e,e as i}from"./app-Ba--U_Af.js";const c={},r=i(`<h1 id="如何优雅地停止thread" tabindex="-1"><a class="header-anchor" href="#如何优雅地停止thread"><span>如何优雅地停止Thread</span></a></h1><p>作者：大闲人柴毛毛</p><p>interrupted()是Java提供的一种中断机制，要把中断搞清楚，还是得先系统性了解下什么是中断机制。</p><h2 id="什么是中断" tabindex="-1"><a class="header-anchor" href="#什么是中断"><span><strong>什么是中断？</strong></span></a></h2><p>在Java中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。</p><ul><li>中断只是一种协作机制，Java没有给中断增加任何语法，中断的过程完全需要程序员自己实现。若要中断一个线程，你需要手动调用该线程的interrupted方法，该方法也仅仅是将线程对象的中断标识设成true；接着你需要自己写代码不断地检测当前线程的标识位；如果为true，表示别的线程要求这条线程中断，此时究竟该做什么需要你自己写代码实现。</li><li>每个线程对象中都有一个标识，用于表示线程是否被中断；该标识位为true表示中断，为false表示未中断；</li><li>通过调用线程对象的interrupt方法将该线程的标识位设为true；可以在别的线程中调用，也可以在自己的线程中调用。</li></ul><h2 id="中断的相关方法" tabindex="-1"><a class="header-anchor" href="#中断的相关方法"><span>中断的相关方法</span></a></h2><ul><li>public void interrupt() 将调用者线程的中断状态设为true。</li><li>public boolean isInterrupted() 判断调用者线程的中断状态。</li><li>public static boolean interrupted 只能通过Thread.interrupted()调用。 它会做两步操作：</li></ul><ol><li>返回<strong>当前线程</strong>的中断状态；</li><li>将当前线程的中断状态设为false；</li></ol><h2 id="如何使用中断" tabindex="-1"><a class="header-anchor" href="#如何使用中断"><span><strong>如何使用中断？</strong></span></a></h2><p>要使用中断，首先需要在可能会发生中断的线程中不断监听中断状态，一旦发生中断，就执行相应的中断处理代码。 当需要中断线程时，调用该线程对象的interrupt函数即可。</p><p><strong>1.设置中断监听</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 若未发生中断，就正常执行任务</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 正常任务代码……</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 中断的处理代码……</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常的任务代码被封装在while循环中，每次执行完一遍任务代码就检查一下中断状态；一旦发生中断，则跳过while循环，直接执行后面的中断处理代码。</p><p><strong>2.触发中断</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>t1.interrupt();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码执行后会将t1对象的中断状态设为true，此时t1线程的正常任务代码执行完成后，进入下一次while循环前Thread.currentThread.isInterrupted()的结果为true，此时退出循环，执行循环后面的中断处理代码。</p><h2 id="如何安全地停止线程" tabindex="-1"><a class="header-anchor" href="#如何安全地停止线程"><span><strong>如何安全地停止线程？</strong></span></a></h2><p>stop函数停止线程过于暴力，它会立即停止线程，不给任何资源释放的余地，下面介绍两种安全停止线程的方法。</p><h3 id="_1-循环标记变量" tabindex="-1"><a class="header-anchor" href="#_1-循环标记变量"><span><strong>1.循环标记变量</strong></span></a></h3><p>自定义一个共享的boolean类型变量，表示当前线程是否需要中断。</p><ul><li>中断标识</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>任务执行函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>interrupted<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 正常任务代码……</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 中断处理代码……</span>
        <span class="token comment">// 可以在这里进行资源的释放等操作……</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>中断函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-循环中断状态" tabindex="-1"><a class="header-anchor" href="#_2-循环中断状态"><span><strong>2.循环中断状态</strong></span></a></h3><ul><li>中断标识 由线程对象提供，无需自己定义。</li><li>任务执行函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 正常任务代码……</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 中断处理代码……</span>
        <span class="token comment">// 可以在这里进行资源的释放等操作……</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>中断函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述两种方法本质一样，都是通过循环查看一个共享标记为来判断线程是否需要中断，他们的区别在于：第一种方法的标识位是我们自己设定的，而第二种方法的标识位是Java提供的。除此之外，他们的实现方法是一样的。</p><p>上述两种方法之所以较为安全，是因为一条线程发出终止信号后，接收线程并不会立即停止，而是将本次循环的任务执行完，再跳出循环停止线程。此外，程序员又可以在跳出循环后添加额外的代码进行收尾工作。</p><h2 id="如何处理中断" tabindex="-1"><a class="header-anchor" href="#如何处理中断"><span><strong>如何处理中断？</strong></span></a></h2><p>上文都在介绍如何获取中断状态，那么当我们捕获到中断状态后，究竟如何处理呢？</p><ul><li>Java类库中提供的一些可能会发生阻塞的方法都会抛InterruptedException异常，如：BlockingQueue#put、BlockingQueue#take、Object#wait、Thread#sleep。</li><li>当你在某一条线程中调用这些方法时，这个方法可能会被阻塞很长时间，你可以在别的线程中调用当前线程对象的interrupt方法触发这些函数抛出InterruptedException异常。</li><li>当一个函数抛出InterruptedException异常时，表示这个方法阻塞的时间太久了，别人不想等它执行结束了。</li><li>当你的捕获到一个InterruptedException异常后，亦可以处理它，或者向上抛出。</li><li>抛出时要注意？？？：当你捕获到InterruptedException异常后，当前线程的中断状态已经被修改为false(表示线程未被中断)；此时你若能够处理中断，则不用理会该值；但如果你继续向上抛InterruptedException异常，你需要再次调用interrupt方法，将当前线程的中断状态设为true。</li><li><strong>注意</strong>：绝对不能“吞掉中断”！即捕获了InterruptedException而不作任何处理。这样违背了中断机制的规则，别人想让你线程中断，然而你自己不处理，也不将中断请求告诉调用者，调用者一直以为没有中断请求。</li></ul><h1 id="原文链接" tabindex="-1"><a class="header-anchor" href="#原文链接"><span>原文链接</span></a></h1>`,38),u={href:"https://www.zhihu.com/question/41048032/answer/252905837",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"其他资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他资料"},[n("span",null,"其他资料")])],-1),k={href:"https://stackoverflow.com/questions/3194545/how-to-stop-a-java-thread-gracefully",target:"_blank",rel:"noopener noreferrer"},v={href:"https://stackoverflow.com/questions/671049/how-do-you-kill-a-thread-in-java",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/DreamSea/archive/2012/01/11/JavaThread.html",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=p("ExternalLinkIcon");return l(),o("div",null,[r,n("p",null,[n("a",u,[s("Java里一个线程调用了Thread.interrupt()到底意味着什么？"),e(a)])]),d,n("p",null,[n("a",k,[s("How to stop a java thread gracefully?"),e(a)])]),n("p",null,[n("a",v,[s("How do you kill a Thread in Java?"),e(a)])]),n("p",null,[n("a",h,[s("Java Thread 总结"),e(a)])])])}const f=t(c,[["render",m],["__file","如何优雅地停止Thread.html.vue"]]),y=JSON.parse('{"path":"/tech/java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%81%9C%E6%AD%A2Thread.html","title":"如何优雅地停止Thread","lang":"zh-CN","frontmatter":{"date":"2019-07-08T23:18:00.000Z","category":["Java"],"tag":["线程"],"description":"如何优雅地停止Thread 作者：大闲人柴毛毛 interrupted()是Java提供的一种中断机制，要把中断搞清楚，还是得先系统性了解下什么是中断机制。 什么是中断？ 在Java中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。 中断只是一种协作机制，Java没有给中断增...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%81%9C%E6%AD%A2Thread.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"如何优雅地停止Thread"}],["meta",{"property":"og:description","content":"如何优雅地停止Thread 作者：大闲人柴毛毛 interrupted()是Java提供的一种中断机制，要把中断搞清楚，还是得先系统性了解下什么是中断机制。 什么是中断？ 在Java中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。 中断只是一种协作机制，Java没有给中断增..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"线程"}],["meta",{"property":"article:published_time","content":"2019-07-08T23:18:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何优雅地停止Thread\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-08T23:18:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"什么是中断？","slug":"什么是中断","link":"#什么是中断","children":[]},{"level":2,"title":"中断的相关方法","slug":"中断的相关方法","link":"#中断的相关方法","children":[]},{"level":2,"title":"如何使用中断？","slug":"如何使用中断","link":"#如何使用中断","children":[]},{"level":2,"title":"如何安全地停止线程？","slug":"如何安全地停止线程","link":"#如何安全地停止线程","children":[{"level":3,"title":"1.循环标记变量","slug":"_1-循环标记变量","link":"#_1-循环标记变量","children":[]},{"level":3,"title":"2.循环中断状态","slug":"_2-循环中断状态","link":"#_2-循环中断状态","children":[]}]},{"level":2,"title":"如何处理中断？","slug":"如何处理中断","link":"#如何处理中断","children":[]}],"git":{"createdTime":1679384580000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1},{"name":"donghaibin","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":5.12,"words":1537},"localizedDate":"2019年7月8日","excerpt":"\\n<p>作者：大闲人柴毛毛</p>\\n<p>interrupted()是Java提供的一种中断机制，要把中断搞清楚，还是得先系统性了解下什么是中断机制。</p>\\n<h2><strong>什么是中断？</strong></h2>\\n<p>在Java中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。</p>\\n<ul>\\n<li>中断只是一种协作机制，Java没有给中断增加任何语法，中断的过程完全需要程序员自己实现。若要中断一个线程，你需要手动调用该线程的interrupted方法，该方法也仅仅是将线程对象的中断标识设成true；接着你需要自己写代码不断地检测当前线程的标识位；如果为true，表示别的线程要求这条线程中断，此时究竟该做什么需要你自己写代码实现。</li>\\n<li>每个线程对象中都有一个标识，用于表示线程是否被中断；该标识位为true表示中断，为false表示未中断；</li>\\n<li>通过调用线程对象的interrupt方法将该线程的标识位设为true；可以在别的线程中调用，也可以在自己的线程中调用。</li>\\n</ul>","autoDesc":true}');export{f as comp,y as data};
