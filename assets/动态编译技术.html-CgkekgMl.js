import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},o=t(`<h1 id="动态编译技术" tabindex="-1"><a class="header-anchor" href="#动态编译技术"><span>动态编译技术</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>com.sun.tools.javac.jvm.ClassWriter#writeClass 把字节码写出到OutputStream中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程"><span>编译过程</span></a></h2><p>java文件-&gt; JCCompilationUnit（类） -&gt; 注解处理器 -&gt; 写出class文件</p><h3 id="jccompilationunit生成" tabindex="-1"><a class="header-anchor" href="#jccompilationunit生成"><span>JCCompilationUnit生成</span></a></h3><p>语法树生成</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">JCCompilationUnit</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">JavaFileObject</span> filename<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> msec <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JCCompilationUnit</span> tree <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">make<span class="token punctuation">.</span></span>TopLevel</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">printVerbose</span><span class="token punctuation">(</span><span class="token string">&quot;parsing.started&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskListener<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">TaskEvent</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskEvent</span><span class="token punctuation">(</span><span class="token class-name">TaskEvent<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">PARSE</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
                taskListener<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                keepComments <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                genEndPos <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Parser</span> parser <span class="token operator">=</span> parserFactory<span class="token punctuation">.</span><span class="token function">newParser</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token function">keepComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> genEndPos<span class="token punctuation">,</span>
                                lineDebugInfo<span class="token punctuation">,</span> filename<span class="token punctuation">.</span><span class="token function">isNameCompatible</span><span class="token punctuation">(</span><span class="token string">&quot;module-info&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Kind</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tree <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseCompilationUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">printVerbose</span><span class="token punctuation">(</span><span class="token string">&quot;parsing.done&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">elapsed</span><span class="token punctuation">(</span>msec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        tree<span class="token punctuation">.</span>sourcefile <span class="token operator">=</span> filename<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>taskListener<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TaskEvent</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskEvent</span><span class="token punctuation">(</span><span class="token class-name">TaskEvent<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">PARSE</span><span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
            taskListener<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> tree<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解处理器" tabindex="-1"><a class="header-anchor" href="#注解处理器"><span>注解处理器</span></a></h2><p>在<code>com.sun.tools.javac.processing.JavacProcessingEnvironment#initProcessorIterator</code>中初始化注解处理器的迭代器</p><h3 id="初始化注解处理器迭代器" tabindex="-1"><a class="header-anchor" href="#初始化注解处理器迭代器"><span>初始化注解处理器迭代器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initProcessorIterator</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span><span class="token punctuation">&gt;</span></span> processors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span><span class="token punctuation">&gt;</span></span> processorIterator<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token constant">XPRINT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                processorIterator <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintingProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">AssertionError</span> assertError <span class="token operator">=</span>
                    <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">&quot;Problem instantiating PrintingProcessor.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                assertError<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> assertError<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>processors <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 编译器指定的处理器</span>
            processorIterator <span class="token operator">=</span> processors<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>processorLoaderException <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 * If the &quot;-processor&quot; option is used, search the appropriate
                 * path for the named class.  Otherwise, use a service
                 * provider mechanism to create the processor iterator.
                 */</span>
                <span class="token comment">// 优先处理&quot;-processor&quot;这个参数</span>
                <span class="token class-name">String</span> processorNames <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token constant">PROCESSOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileManager<span class="token punctuation">.</span><span class="token function">hasLocation</span><span class="token punctuation">(</span><span class="token constant">ANNOTATION_PROCESSOR_MODULE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    processorIterator <span class="token operator">=</span> <span class="token punctuation">(</span>processorNames <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                            <span class="token keyword">new</span> <span class="token class-name">ServiceIterator</span><span class="token punctuation">(</span>serviceLoader<span class="token punctuation">,</span> log<span class="token punctuation">)</span> <span class="token operator">:</span>
                            <span class="token keyword">new</span> <span class="token class-name">NameServiceIterator</span><span class="token punctuation">(</span>serviceLoader<span class="token punctuation">,</span> log<span class="token punctuation">,</span> processorNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>processorNames <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    processorIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameProcessIterator</span><span class="token punctuation">(</span>processorNames<span class="token punctuation">,</span> processorClassLoader<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 通过ServiceLoader类加载，SPI机制</span>
                    processorIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceIterator</span><span class="token punctuation">(</span>processorClassLoader<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 * A security exception will occur if we can&#39;t create a classloader.
                 * Ignore the exception if, with hindsight, we didn&#39;t need it anyway
                 * (i.e. no processor was specified either explicitly, or implicitly,
                 * in service configuration file.) Otherwise, we cannot continue.
                 */</span>
                processorIterator <span class="token operator">=</span> <span class="token function">handleServiceLoaderUnavailability</span><span class="token punctuation">(</span><span class="token string">&quot;proc.cant.create.loader&quot;</span><span class="token punctuation">,</span>
                        processorLoaderException<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 这里也有一个处理，还没深入研究</span>
        <span class="token class-name">PlatformDescription</span> platformProvider <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">PlatformDescription</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Processor</span><span class="token punctuation">&gt;</span></span> platformProcessors <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>platformProvider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            platformProcessors <span class="token operator">=</span> platformProvider<span class="token punctuation">.</span><span class="token function">getAnnotationProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                 <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                 <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PluginInfo</span><span class="token operator">::</span><span class="token function">getPlugin</span><span class="token punctuation">)</span>
                                                 <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterators <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>processorIterator<span class="token punctuation">,</span>
                                                                platformProcessors<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span><span class="token punctuation">&gt;</span></span> compoundIterator <span class="token operator">=</span>
                <span class="token class-name">Iterators</span><span class="token punctuation">.</span><span class="token function">createCompoundIterator</span><span class="token punctuation">(</span>iterators<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        discoveredProcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscoveredProcessors</span><span class="token punctuation">(</span>compoundIterator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行处理器" tabindex="-1"><a class="header-anchor" href="#执行处理器"><span>执行处理器</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>com.sun.tools.javac.main.JavaCompiler#processAnnotations
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-&gt; <code>com.sun.tools.javac.processing.JavacProcessingEnvironment#doProcessing</code></p><p>-&gt; <code>com.sun.tools.javac.processing.JavacProcessingEnvironment.Round#run</code></p><p>-&gt; <code>com.sun.tools.javac.processing.JavacProcessingEnvironment#discoverAndRunProcs</code></p><p>通过读取<code>Processor</code>类的<code>getSupportedOptions</code>方法获取支持的处理器，然后执行。</p><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p><code>com.sun.tools.javac.main.JavaCompiler#compile</code>核心代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JavaFileObject</span><span class="token punctuation">&gt;</span></span> sourceFileObjects<span class="token punctuation">,</span>
                        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> classnames<span class="token punctuation">,</span>
                        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Processor</span><span class="token punctuation">&gt;</span></span> processors<span class="token punctuation">,</span>
                        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addModules<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskListener<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            taskListener<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskEvent</span><span class="token punctuation">(</span><span class="token class-name">TaskEvent<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">COMPILATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>processors <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> processors<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            explicitAnnotationProcessingRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// as a JavaCompiler can only be used once, throw an exception if</span>
        <span class="token comment">// it has been used before.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasBeenUsed<span class="token punctuation">)</span>
            <span class="token function">checkReusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hasBeenUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// forcibly set the equivalent of -Xlint:-options, so that no further</span>
        <span class="token comment">// warnings about command line options are generated from this point on</span>
        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">XLINT_CUSTOM</span><span class="token punctuation">.</span>primaryName <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token class-name">LintCategory</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">.</span>option<span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token constant">XLINT_CUSTOM</span><span class="token punctuation">.</span>primaryName <span class="token operator">+</span> <span class="token class-name">LintCategory</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">.</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>

        start_msec <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 初始化类注解处理器</span>
            <span class="token function">initProcessAnnotations</span><span class="token punctuation">(</span>processors<span class="token punctuation">,</span> sourceFileObjects<span class="token punctuation">,</span> classnames<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> classnames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> sep <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sep <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    modules<span class="token punctuation">.</span><span class="token function">addExtraAddModules</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> moduleName <span class="token operator">:</span> addModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                modules<span class="token punctuation">.</span><span class="token function">addExtraAddModules</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// These method calls must be chained to avoid memory leaks</span>
            <span class="token comment">// 执行类注解处理器</span>
            <span class="token function">processAnnotations</span><span class="token punctuation">(</span>
                <span class="token function">enterTrees</span><span class="token punctuation">(</span>
                        <span class="token function">stopIfError</span><span class="token punctuation">(</span><span class="token class-name">CompileState</span><span class="token punctuation">.</span><span class="token constant">ENTER</span><span class="token punctuation">,</span>
                                <span class="token function">initModules</span><span class="token punctuation">(</span><span class="token function">stopIfError</span><span class="token punctuation">(</span><span class="token class-name">CompileState</span><span class="token punctuation">.</span><span class="token constant">ENTER</span><span class="token punctuation">,</span> <span class="token function">parseFiles</span><span class="token punctuation">(</span>sourceFileObjects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                classnames
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// If it&#39;s safe to do so, skip attr / flow / gen for implicit classes</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>taskListener<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    implicitSourcePolicy <span class="token operator">==</span> <span class="token class-name">ImplicitSourcePolicy</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                todo<span class="token punctuation">.</span><span class="token function">retainFiles</span><span class="token punctuation">(</span>inputFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 生成class文件, 关键是generate方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CompileState</span><span class="token punctuation">.</span><span class="token constant">ATTR</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>shouldStopPolicyIfNoError<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>compilePolicy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">SIMPLE</span><span class="token operator">:</span>
                    <span class="token function">generate</span><span class="token punctuation">(</span><span class="token function">desugar</span><span class="token punctuation">(</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token function">attribute</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>

                <span class="token keyword">case</span> <span class="token constant">BY_FILE</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Queue</span><span class="token punctuation">&lt;</span><span class="token class-name">Env</span><span class="token punctuation">&lt;</span><span class="token class-name">AttrContext</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> todo<span class="token punctuation">.</span><span class="token function">groupByFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldStop</span><span class="token punctuation">(</span><span class="token class-name">CompileState</span><span class="token punctuation">.</span><span class="token constant">ATTR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token function">generate</span><span class="token punctuation">(</span><span class="token function">desugar</span><span class="token punctuation">(</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token function">attribute</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>

                <span class="token keyword">case</span> <span class="token constant">BY_TODO</span><span class="token operator">:</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>todo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token function">generate</span><span class="token punctuation">(</span><span class="token function">desugar</span><span class="token punctuation">(</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token function">attribute</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>

                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;unknown compile policy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Abort</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>devVerbose<span class="token punctuation">)</span>
                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>verbose<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                elapsed_msec <span class="token operator">=</span> <span class="token function">elapsed</span><span class="token punctuation">(</span>start_msec<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">printVerbose</span><span class="token punctuation">(</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>elapsed_msec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token function">reportDeferredDiagnostics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>log<span class="token punctuation">.</span><span class="token function">hasDiagnosticListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printCount</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token function">errorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printCount</span><span class="token punctuation">(</span><span class="token string">&quot;warn&quot;</span><span class="token punctuation">,</span> <span class="token function">warningCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printSuppressedCount</span><span class="token punctuation">(</span><span class="token function">errorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>nsuppressederrors<span class="token punctuation">,</span> <span class="token string">&quot;count.error.recompile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">printSuppressedCount</span><span class="token punctuation">(</span><span class="token function">warningCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>nsuppressedwarns<span class="token punctuation">,</span> <span class="token string">&quot;count.warn.recompile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskListener<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                taskListener<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskEvent</span><span class="token punctuation">(</span><span class="token class-name">TaskEvent<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">COMPILATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>procEnvImpl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                procEnvImpl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>https://zhuanlan.zhihu.com/p/434948213</p>`,22),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","动态编译技术.html.vue"]]),d=JSON.parse('{"path":"/tech/java/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF.html","title":"动态编译技术","lang":"zh-CN","frontmatter":{"date":"2022-07-07T10:28:00.000Z","category":["Java"],"tag":["动态加载","编译"],"description":"动态编译技术 编译过程 java文件-> JCCompilationUnit（类） -> 注解处理器 -> 写出class文件 JCCompilationUnit生成 语法树生成 注解处理器 在com.sun.tools.javac.processing.JavacProcessingEnvironment#initProcessorIterator中...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"动态编译技术"}],["meta",{"property":"og:description","content":"动态编译技术 编译过程 java文件-> JCCompilationUnit（类） -> 注解处理器 -> 写出class文件 JCCompilationUnit生成 语法树生成 注解处理器 在com.sun.tools.javac.processing.JavacProcessingEnvironment#initProcessorIterator中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"动态加载"}],["meta",{"property":"article:tag","content":"编译"}],["meta",{"property":"article:published_time","content":"2022-07-07T10:28:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态编译技术\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-07T10:28:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"编译过程","slug":"编译过程","link":"#编译过程","children":[{"level":3,"title":"JCCompilationUnit生成","slug":"jccompilationunit生成","link":"#jccompilationunit生成","children":[]}]},{"level":2,"title":"注解处理器","slug":"注解处理器","link":"#注解处理器","children":[{"level":3,"title":"初始化注解处理器迭代器","slug":"初始化注解处理器迭代器","link":"#初始化注解处理器迭代器","children":[]},{"level":3,"title":"执行处理器","slug":"执行处理器","link":"#执行处理器","children":[]}]},{"level":2,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1679407002000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":2}]},"readingTime":{"minutes":2.43,"words":729},"localizedDate":"2022年7月7日","excerpt":"\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>com.sun.tools.javac.jvm.ClassWriter#writeClass 把字节码写出到OutputStream中\\n</code></pre></div><h2>编译过程</h2>\\n<p>java文件-&gt; JCCompilationUnit（类） -&gt; 注解处理器 -&gt; 写出class文件</p>\\n<h3>JCCompilationUnit生成</h3>\\n<p>语法树生成</p>","autoDesc":true}');export{r as comp,d as data};
