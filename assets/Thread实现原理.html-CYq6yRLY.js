import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},o=t(`<h1 id="thread实现原理" tabindex="-1"><a class="header-anchor" href="#thread实现原理"><span>Thread实现原理</span></a></h1><h2 id="什么是线程" tabindex="-1"><a class="header-anchor" href="#什么是线程"><span>什么是线程</span></a></h2><p>线程在Linux系统中也称做轻量级进程（LWP），是调度资源的最小单元，不同的线程间共享进程[1]中的数据，</p><p>[1] 进程是分配资源的最小单元。</p><h2 id="java线程" tabindex="-1"><a class="header-anchor" href="#java线程"><span>Java线程</span></a></h2><p>java线程中的native方法具体实现在 <code>jvm.cpp</code> 中，在 <code>jdk/src/java.base/share/native/libjava/Thread.c</code> 中是这样定义的。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> JNINativeMethod methods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;start0&quot;</span><span class="token punctuation">,</span>           <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_StartThread<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;stop0&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;(&quot;</span> OBJ <span class="token string">&quot;)V&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_StopThread<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;isAlive&quot;</span><span class="token punctuation">,</span>          <span class="token string">&quot;()Z&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_IsThreadAlive<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;suspend0&quot;</span><span class="token punctuation">,</span>         <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_SuspendThread<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;resume0&quot;</span><span class="token punctuation">,</span>          <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_ResumeThread<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;setPriority0&quot;</span><span class="token punctuation">,</span>     <span class="token string">&quot;(I)V&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_SetThreadPriority<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;yield&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_Yield<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;sleep&quot;</span><span class="token punctuation">,</span>            <span class="token string">&quot;(J)V&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_Sleep<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;currentThread&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;()&quot;</span> THD<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_CurrentThread<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;countStackFrames&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;()I&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_CountStackFrames<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;interrupt0&quot;</span><span class="token punctuation">,</span>       <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_Interrupt<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;isInterrupted&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;(Z)Z&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_IsInterrupted<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;holdsLock&quot;</span><span class="token punctuation">,</span>        <span class="token string">&quot;(&quot;</span> OBJ <span class="token string">&quot;)Z&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_HoldsLock<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;getThreads&quot;</span><span class="token punctuation">,</span>        <span class="token string">&quot;()[&quot;</span> THD<span class="token punctuation">,</span>   <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_GetAllThreads<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;dumpThreads&quot;</span><span class="token punctuation">,</span>      <span class="token string">&quot;([&quot;</span> THD <span class="token string">&quot;)[[&quot;</span> STE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_DumpThreads<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;setNativeName&quot;</span><span class="token punctuation">,</span>    <span class="token string">&quot;(&quot;</span> STR <span class="token string">&quot;)V&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_SetNativeThreadName<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start实现" tabindex="-1"><a class="header-anchor" href="#start实现"><span>start实现</span></a></h3><table><thead><tr><th>类/函数</th><th>作用</th><th>位置</th></tr></thead><tbody><tr><td>MutexLocker::MutexLocker</td><td>mutex锁</td><td>/jdk-jdk-9-181/hotspot/src/share/vm/runtime/mutexLocker.hpp:163</td></tr><tr><td>JNIHandles</td><td></td><td>/jdk-jdk-9-181/hotspot/src/share/vm/runtime/jniHandles.hpp:269</td></tr><tr><td>os::start_thread</td><td>开启线程</td><td>jdk-jdk-9-181/hotspot/src/share/vm/runtime/os.cpp:774</td></tr></tbody></table><p>断点位置</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>JVM_StartThread(JNIEnv*, jobject) at /home/dev/jdk/jdk-jdk-9-181/hotspot/src/share/vm/prims/jvm.cpp:2843
os::create_thread(Thread*, os::ThreadType, unsigned long) at /home/dev/jdk/jdk-jdk-9-181/hotspot/src/os/linux/vm/os_linux.cpp:698
JVM_StartThread(JNIEnv*, jobject) at /home/dev/jdk/jdk-jdk-9-181/hotspot/src/share/vm/prims/jvm.cpp:2777
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p><img src="https://cdn.dhbin.cn/202303301044086.png" alt="生命周期"></p>`,13),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","Thread实现原理.html.vue"]]),d=JSON.parse('{"path":"/tech/java/Thread%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"Thread实现原理","lang":"zh-CN","frontmatter":{"date":"2021-01-05T15:54:13.000Z","category":["Java"],"tag":["Jvm","源码"],"description":"Thread实现原理 什么是线程 线程在Linux系统中也称做轻量级进程（LWP），是调度资源的最小单元，不同的线程间共享进程[1]中的数据， [1] 进程是分配资源的最小单元。 Java线程 java线程中的native方法具体实现在 jvm.cpp 中，在 jdk/src/java.base/share/native/libjava/Thread....","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/Thread%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Thread实现原理"}],["meta",{"property":"og:description","content":"Thread实现原理 什么是线程 线程在Linux系统中也称做轻量级进程（LWP），是调度资源的最小单元，不同的线程间共享进程[1]中的数据， [1] 进程是分配资源的最小单元。 Java线程 java线程中的native方法具体实现在 jvm.cpp 中，在 jdk/src/java.base/share/native/libjava/Thread...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.dhbin.cn/202303301044086.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T02:48:50.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Jvm"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:published_time","content":"2021-01-05T15:54:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-30T02:48:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Thread实现原理\\",\\"image\\":[\\"https://cdn.dhbin.cn/202303301044086.png\\"],\\"datePublished\\":\\"2021-01-05T15:54:13.000Z\\",\\"dateModified\\":\\"2023-03-30T02:48:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"什么是线程","slug":"什么是线程","link":"#什么是线程","children":[]},{"level":2,"title":"Java线程","slug":"java线程","link":"#java线程","children":[{"level":3,"title":"start实现","slug":"start实现","link":"#start实现","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]}],"git":{"createdTime":1680144530000,"updatedTime":1680144530000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":0.87,"words":262},"localizedDate":"2021年1月5日","excerpt":"\\n<h2>什么是线程</h2>\\n<p>线程在Linux系统中也称做轻量级进程（LWP），是调度资源的最小单元，不同的线程间共享进程[1]中的数据，</p>\\n<p>[1] 进程是分配资源的最小单元。</p>\\n<h2>Java线程</h2>\\n<p>java线程中的native方法具体实现在 <code>jvm.cpp</code> 中，在 <code>jdk/src/java.base/share/native/libjava/Thread.c</code> 中是这样定义的。</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">static</span> JNINativeMethod methods<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"start0\\"</span><span class=\\"token punctuation\\">,</span>           <span class=\\"token string\\">\\"()V\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_StartThread<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"stop0\\"</span><span class=\\"token punctuation\\">,</span>            <span class=\\"token string\\">\\"(\\"</span> OBJ <span class=\\"token string\\">\\")V\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_StopThread<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"isAlive\\"</span><span class=\\"token punctuation\\">,</span>          <span class=\\"token string\\">\\"()Z\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_IsThreadAlive<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"suspend0\\"</span><span class=\\"token punctuation\\">,</span>         <span class=\\"token string\\">\\"()V\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_SuspendThread<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"resume0\\"</span><span class=\\"token punctuation\\">,</span>          <span class=\\"token string\\">\\"()V\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_ResumeThread<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"setPriority0\\"</span><span class=\\"token punctuation\\">,</span>     <span class=\\"token string\\">\\"(I)V\\"</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_SetThreadPriority<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"yield\\"</span><span class=\\"token punctuation\\">,</span>            <span class=\\"token string\\">\\"()V\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_Yield<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"sleep\\"</span><span class=\\"token punctuation\\">,</span>            <span class=\\"token string\\">\\"(J)V\\"</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_Sleep<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"currentThread\\"</span><span class=\\"token punctuation\\">,</span>    <span class=\\"token string\\">\\"()\\"</span> THD<span class=\\"token punctuation\\">,</span>     <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_CurrentThread<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"countStackFrames\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"()I\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_CountStackFrames<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"interrupt0\\"</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token string\\">\\"()V\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_Interrupt<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"isInterrupted\\"</span><span class=\\"token punctuation\\">,</span>    <span class=\\"token string\\">\\"(Z)Z\\"</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_IsInterrupted<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"holdsLock\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token string\\">\\"(\\"</span> OBJ <span class=\\"token string\\">\\")Z\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_HoldsLock<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"getThreads\\"</span><span class=\\"token punctuation\\">,</span>        <span class=\\"token string\\">\\"()[\\"</span> THD<span class=\\"token punctuation\\">,</span>   <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_GetAllThreads<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"dumpThreads\\"</span><span class=\\"token punctuation\\">,</span>      <span class=\\"token string\\">\\"([\\"</span> THD <span class=\\"token string\\">\\")[[\\"</span> STE<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_DumpThreads<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"setNativeName\\"</span><span class=\\"token punctuation\\">,</span>    <span class=\\"token string\\">\\"(\\"</span> STR <span class=\\"token string\\">\\")V\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>JVM_SetNativeThreadName<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
