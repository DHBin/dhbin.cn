import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-Ba--U_Af.js";const p={},t=e(`<h1 id="数据结构02-压缩链表-ziplist" tabindex="-1"><a class="header-anchor" href="#数据结构02-压缩链表-ziplist"><span>数据结构02-压缩链表-ziplist</span></a></h1><h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><p><img src="https://cdn.dhbin.cn/1636093037694-398174ec-0a5e-4410-abee-2473efcfa96f.jpeg" alt="img"></p><h2 id="作用于" tabindex="-1"><a class="header-anchor" href="#作用于"><span>作用于</span></a></h2><ul><li>数量比较少的hash、zset</li></ul><h2 id="ziplist数据结构" tabindex="-1"><a class="header-anchor" href="#ziplist数据结构"><span>ziplist数据结构</span></a></h2><p>ziplist是一个用一段特殊编码实现的双向链表，优势是占用内存小，可以存储字符串类型和整数类型。在内存布局中包含一下几个字段</p><ul><li>zlbytes：（4 bytes）整个链表占的内存字节数</li><li>zltail：（4 bytes）链表尾部节点的偏移量，存储这个信息的作用是实现反向遍历，因为需要知道尾部的地址才能从尾部向前遍历节点</li><li>zllen：（2 bytes）节点长度</li><li>entry：（n bytes）数据节点，数据节点包含3个结构，下面详细讲解</li><li>zlend：（1 bytes）结束标识符，固定是0xFF</li></ul><h2 id="节点数据结构" tabindex="-1"><a class="header-anchor" href="#节点数据结构"><span>节点数据结构</span></a></h2><p>在6.2的版本中有3种节点数据结构，对不同长度的字符串、数字使用不同的数据结构存储</p><h3 id="图-1" tabindex="-1"><a class="header-anchor" href="#图-1"><span>图（1）</span></a></h3><h4 id="字段" tabindex="-1"><a class="header-anchor" href="#字段"><span>字段</span></a></h4><ul><li>prevlen：前一个节点的长度</li><li>encoding：编码</li><li>entry：节点数据</li></ul><h4 id="满足条件" tabindex="-1"><a class="header-anchor" href="#满足条件"><span>满足条件</span></a></h4><p>满足一下条件使用这种数据结构</p><ul><li>前一个节点的长度小于254bytes</li><li>如果是数字，满足<code>x &gt; 12</code>，如果是字符串，满足长度小于254</li></ul><h3 id="图-2" tabindex="-1"><a class="header-anchor" href="#图-2"><span>图（2）</span></a></h3><h4 id="字段-1" tabindex="-1"><a class="header-anchor" href="#字段-1"><span>字段</span></a></h4><ul><li>FE：标识符，固定是<code>0xFE</code>，作用是识别该数据结构</li><li>prevlen：前一个节点的长度，4个字节小端序列存储</li><li>encoding：编码</li><li>entry：节点数据</li></ul><h4 id="满足条件-1" tabindex="-1"><a class="header-anchor" href="#满足条件-1"><span>满足条件</span></a></h4><ul><li>前一个节点的长度大于等于254bytes</li></ul><h3 id="图-3" tabindex="-1"><a class="header-anchor" href="#图-3"><span>图（3）</span></a></h3><h4 id="字段-2" tabindex="-1"><a class="header-anchor" href="#字段-2"><span>字段</span></a></h4><ul><li>prevlen：前一个节点的长度</li><li>encoding：编码</li></ul><h4 id="满足条件-2" tabindex="-1"><a class="header-anchor" href="#满足条件-2"><span>满足条件</span></a></h4><ul><li>数字类型，满足<code>0 &lt;= x &gt;= 12</code></li></ul><h3 id="encoding字段生成逻辑" tabindex="-1"><a class="header-anchor" href="#encoding字段生成逻辑"><span>encoding字段生成逻辑</span></a></h3><p>encoding字段记录了节点数据类型（字符串、数字）和数据长度信息，下面分两种类型进行讲解。</p><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 把encoding写入内存 */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">zipStoreEntryEncoding</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> rawlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 默认编码长度是1 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">/* 判断是否字符串类型， 满足条件 (encoding &amp; 0xc0) &lt; 0xc0 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ZIP_IS_STR</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Although encoding is given it may not be set for strings,
         * so we determine it here using the raw length. */</span>
        <span class="token comment">/* 字符串长度（包含结束字节\`\\0\`）小于64 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rawlen <span class="token operator">&lt;=</span> <span class="token number">0x3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>
            <span class="token comment">/* 编码 = (0 &lt;&lt; 6) | rawlen，其实就是长度是什么就存什么*/</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ZIP_STR_06B <span class="token operator">|</span> rawlen<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rawlen <span class="token operator">&lt;=</span> <span class="token number">0x3fff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 长度 &gt; 0x3f &lt;= 0x3fff（16,383） */</span>
            <span class="token comment">/* 长度 + 1 = 2*/</span>
            len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>
            <span class="token comment">/* 下面操作就是rawlen塞到两个字节的内存中 */</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ZIP_STR_14B <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rawlen <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rawlen <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 长度 + 1 = 5*/</span>
            len <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>
            <span class="token comment">/* 下面操作就是rawlen塞到5个字节的内存中 */</span>
            buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ZIP_STR_32B<span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rawlen <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rawlen <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rawlen <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
            buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> rawlen <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Implies integer encoding, so length is always 1. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>
        <span class="token comment">/* 数字类型的编码由 zipTryEncoding 中生成*/</span>
        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> encoding<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Store this length at p. */</span>
    <span class="token comment">/* 写入内存 */</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串标识如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_STR_MASK</span> <span class="token expression"><span class="token number">0xc0</span> </span><span class="token comment">/* 掩码 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_STR_06B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> </span><span class="token comment">/* 长度&lt;= 63 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_STR_14B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> </span><span class="token comment">/* 长度&lt;= 16,383 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_STR_32B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> </span><span class="token comment">/* 长度&gt; 16,383 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">zipTryEncoding</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>entry<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> entrylen<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>encoding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>

    <span class="token comment">/* 值的长度大于等于32或者等于0的时候，直接返回 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entrylen <span class="token operator">&gt;=</span> <span class="token number">32</span> <span class="token operator">||</span> entrylen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 尝试把字符串转成数字类型 long long */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">string2ll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>entry<span class="token punctuation">,</span>entrylen<span class="token punctuation">,</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Great, the string can be encoded. Check what&#39;s the smallest
         * of our encoding types that can hold this value. */</span>
        <span class="token comment">/* 数字大于等于0，并且大于等于12时，直接把值存储到编码中 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_IMM_MIN<span class="token operator">+</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> INT8_MIN <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> INT8_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 8位数字 */</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_8B<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> INT16_MIN <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> INT16_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 16位数字 */</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_16B<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> INT24_MIN <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> INT24_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 24位数字 */</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_24B<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> INT32_MIN <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> INT32_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 32位数字 */</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_32B<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">/* 64位数字 */</span>
            <span class="token operator">*</span>encoding <span class="token operator">=</span> ZIP_INT_64B<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token operator">*</span>v <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中数字标识值如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_INT_16B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">/* 16位 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_INT_32B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">/* 32位 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_INT_64B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">/* 64位 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_INT_24B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">/* 24位 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_INT_8B</span> <span class="token expression"><span class="token number">0xfe</span> </span><span class="token comment">/* 8位 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何识别类型" tabindex="-1"><a class="header-anchor" href="#如何识别类型"><span>如何识别类型</span></a></h4><p>数字的标识都与<code>0xc0</code>或运算，说明数字标识的值都&gt;= <code>0xc0</code>。而字符串标识的值都小于<code>0xc0</code></p><h2 id="插入数据逻辑" tabindex="-1"><a class="header-anchor" href="#插入数据逻辑"><span>插入数据逻辑</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Insert item at &quot;p&quot;. 
 * zl：链表指针
 * p：节点指针，这个节点的前面插入
 * s：数据
 * slen：数据长度
 * */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">__ziplistInsert</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
     * curlen：当前链表字节数
     * reqlen：存储*s所需要的字节数
     * newlen：链表更新后的字节数
     * */</span>
    <span class="token class-name">size_t</span> curlen <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_BYTES</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reqlen<span class="token punctuation">,</span> newlen<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevlensize<span class="token punctuation">,</span> prevlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nextdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">123456789</span><span class="token punctuation">;</span> <span class="token comment">/* initialized to avoid warning. Using a value
                                    that is easy to see if for some reason
                                    we use it uninitialized. */</span>
    zlentry tail<span class="token punctuation">;</span>

    <span class="token comment">/* Find out prevlen for the entry that is inserted. */</span>
    <span class="token comment">/* 第一次插入数据的时候，p[0]是ZIP_END */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ZIP_DECODE_PREVLEN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> prevlensize<span class="token punctuation">,</span> prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 第一次插入的时候，p[0] == ptail，因为没有数据，首尾的地址是一样的 */</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptail <span class="token operator">=</span> <span class="token function">ZIPLIST_ENTRY_TAIL</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptail<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 尾插法这个值才不为0 */</span>
            prevlen <span class="token operator">=</span> <span class="token function">zipRawEntryLengthSafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> curlen<span class="token punctuation">,</span> ptail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* See if the entry can be encoded */</span>
    <span class="token comment">/* 尝试对字符串编码，目前就是把字符串转成数字存储，达到减少内存的作用 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zipTryEncoding</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>slen<span class="token punctuation">,</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span><span class="token operator">&amp;</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* &#39;encoding&#39; is set to the appropriate integer encoding */</span>
        <span class="token comment">/* 返回编码后存储所需要的字节 */</span>
        reqlen <span class="token operator">=</span> <span class="token function">zipIntSize</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* &#39;encoding&#39; is untouched, however zipStoreEntryEncoding will use the
         * string length to figure out how to encode it. */</span>
        reqlen <span class="token operator">=</span> slen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* We need space for both the length of the previous entry and
     * the length of the payload. */</span>
    <span class="token comment">/* 保存前一个节点的长度 */</span>
    reqlen <span class="token operator">+=</span> <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 保存编码 */</span>
    reqlen <span class="token operator">+=</span> <span class="token function">zipStoreEntryEncoding</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>encoding<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* When the insert position is not equal to the tail, we need to
     * make sure that the next entry can hold this entry&#39;s length in
     * its prevlen field. */</span>
    <span class="token keyword">int</span> forcelarge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 当长度大于等于254的时候，需要申请多4个字节的空间 */</span>
    nextdiff <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">zipPrevLenByteDiff</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextdiff <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> reqlen <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nextdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        forcelarge <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Store offset because a realloc may change the address of zl. */</span>
    <span class="token comment">/* offset 是链表节点的偏移量 */</span>
    offset <span class="token operator">=</span> p<span class="token operator">-</span>zl<span class="token punctuation">;</span>
    <span class="token comment">/* 新的长度 */</span>
    newlen <span class="token operator">=</span> curlen<span class="token operator">+</span>reqlen<span class="token operator">+</span>nextdiff<span class="token punctuation">;</span>
    <span class="token comment">/* 重新申请内存 */</span>
    zl <span class="token operator">=</span> <span class="token function">ziplistResize</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span>newlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 链表节点指针 */</span>
    p <span class="token operator">=</span> zl<span class="token operator">+</span>offset<span class="token punctuation">;</span>

    <span class="token comment">/* Apply memory move when necessary and update tail offset. */</span>
    <span class="token comment">/* 如果链表中已有数据，则需要移动内存 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Subtract one because of the ZIP_END bytes */</span>
        <span class="token comment">/* 移出空间，让新插入的数据留出位置 */</span>
        <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>p<span class="token operator">-</span>nextdiff<span class="token punctuation">,</span>curlen<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>nextdiff<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Encode this entry&#39;s raw length in the next entry. */</span>
        <span class="token comment">/* 保存当前节点的长度，写到内存中 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>forcelarge<span class="token punctuation">)</span>
            <span class="token function">zipStorePrevEntryLengthLarge</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Update offset for tail */</span>
        <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span>
            <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* When the tail contains more than one entry, we need to take
         * &quot;nextdiff&quot; in account as well. Otherwise, a change in the
         * size of prevlen doesn&#39;t have an effect on the *tail* offset. */</span>
        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">zipEntrySafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tail<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>reqlen<span class="token operator">+</span>tail<span class="token punctuation">.</span>headersize<span class="token operator">+</span>tail<span class="token punctuation">.</span>len<span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span>
                <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>nextdiff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* This element will be the new tail. */</span>
        <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span>p<span class="token operator">-</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* When nextdiff != 0, the raw length of the next entry has changed, so
     * we need to cascade the update throughout the ziplist */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextdiff <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        offset <span class="token operator">=</span> p<span class="token operator">-</span>zl<span class="token punctuation">;</span>
        zl <span class="token operator">=</span> <span class="token function">__ziplistCascadeUpdate</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> zl<span class="token operator">+</span>offset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Write the entry */</span>
    <span class="token comment">/* 保存前一个节点的长度 */</span>
    p <span class="token operator">+=</span> <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 保存当前节点编码 */</span>
    p <span class="token operator">+=</span> <span class="token function">zipStoreEntryEncoding</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>encoding<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 保存数据 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ZIP_IS_STR</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>s<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">zipSaveInteger</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>value<span class="token punctuation">,</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 更新链表长度 */</span>
    <span class="token function">ZIPLIST_INCR_LENGTH</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> zl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何定位首尾节点" tabindex="-1"><a class="header-anchor" href="#如何定位首尾节点"><span>如何定位首尾节点</span></a></h2><ul><li>zlbytes：（4 bytes）整个链表占的内存字节数</li><li>zltail：（4 bytes）链表尾部节点的偏移量</li><li>zllen：（2 bytes）节点长度</li></ul><p>首节点指针：链表指针 - 4 - 4 - 2</p><p>尾节点指针：链表指针 - zltail</p><h2 id="如何遍历" tabindex="-1"><a class="header-anchor" href="#如何遍历"><span>如何遍历</span></a></h2><ul><li>从头到尾遍历：获取首节点的指针，加上当前节点的字节数就是下一个节点的指针了</li><li>从尾到头遍历：获取尾节点的指针，获取前一个节点的长度。节点指针减去前一个节点的长度就是前一个节点的指针</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>删除、替换的思路和插入差不多。找到节点的位置，移除/替换这块空间，重新赋值下一个节点的prelen</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><p>压缩链表存在级联更新的问题，当修改某个节点时，需要修改该节点的后面一个节点的prelen，如果prelen的长度也改变了，就会级联更新下去。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>可以看出redis在内存方面的优化是下足了功夫。从项目实战的方面，当应用追求高性能的时候，往往都会使用一些rpc框架，因为rpc框架的数据传输不像一般的http + json传输（传输了太多多余的字节，比如http的头部、json的语法标识），在大数据量传输的需求下，可以考虑设计数据压缩协议，减少字节传输。</p>`,52),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","数据结构02-压缩链表-ziplist.html.vue"]]),d=JSON.parse('{"path":"/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402-%E5%8E%8B%E7%BC%A9%E9%93%BE%E8%A1%A8-ziplist.html","title":"数据结构02-压缩链表-ziplist","lang":"zh-CN","frontmatter":{"date":"2022-11-03T14:24:00.000Z","category":["Redis"],"tag":["Redis","算法"],"description":"数据结构02-压缩链表-ziplist 总览 img 作用于 数量比较少的hash、zset ziplist数据结构 ziplist是一个用一段特殊编码实现的双向链表，优势是占用内存小，可以存储字符串类型和整数类型。在内存布局中包含一下几个字段 zlbytes：（4 bytes）整个链表占的内存字节数 zltail：（4 bytes）链表尾部节点的偏移...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402-%E5%8E%8B%E7%BC%A9%E9%93%BE%E8%A1%A8-ziplist.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"数据结构02-压缩链表-ziplist"}],["meta",{"property":"og:description","content":"数据结构02-压缩链表-ziplist 总览 img 作用于 数量比较少的hash、zset ziplist数据结构 ziplist是一个用一段特殊编码实现的双向链表，优势是占用内存小，可以存储字符串类型和整数类型。在内存布局中包含一下几个字段 zlbytes：（4 bytes）整个链表占的内存字节数 zltail：（4 bytes）链表尾部节点的偏移..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.dhbin.cn/1636093037694-398174ec-0a5e-4410-abee-2473efcfa96f.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-23T12:17:45.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2022-11-03T14:24:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-23T12:17:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构02-压缩链表-ziplist\\",\\"image\\":[\\"https://cdn.dhbin.cn/1636093037694-398174ec-0a5e-4410-abee-2473efcfa96f.jpeg\\"],\\"datePublished\\":\\"2022-11-03T14:24:00.000Z\\",\\"dateModified\\":\\"2023-03-23T12:17:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"总览","slug":"总览","link":"#总览","children":[]},{"level":2,"title":"作用于","slug":"作用于","link":"#作用于","children":[]},{"level":2,"title":"ziplist数据结构","slug":"ziplist数据结构","link":"#ziplist数据结构","children":[]},{"level":2,"title":"节点数据结构","slug":"节点数据结构","link":"#节点数据结构","children":[{"level":3,"title":"图（1）","slug":"图-1","link":"#图-1","children":[]},{"level":3,"title":"图（2）","slug":"图-2","link":"#图-2","children":[]},{"level":3,"title":"图（3）","slug":"图-3","link":"#图-3","children":[]},{"level":3,"title":"encoding字段生成逻辑","slug":"encoding字段生成逻辑","link":"#encoding字段生成逻辑","children":[]}]},{"level":2,"title":"插入数据逻辑","slug":"插入数据逻辑","link":"#插入数据逻辑","children":[]},{"level":2,"title":"如何定位首尾节点","slug":"如何定位首尾节点","link":"#如何定位首尾节点","children":[]},{"level":2,"title":"如何遍历","slug":"如何遍历","link":"#如何遍历","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1679573865000,"updatedTime":1679573865000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":7.54,"words":2262},"localizedDate":"2022年11月3日","excerpt":"\\n<h2>总览</h2>\\n<p><img src=\\"https://cdn.dhbin.cn/1636093037694-398174ec-0a5e-4410-abee-2473efcfa96f.jpeg\\" alt=\\"img\\"></p>\\n<h2>作用于</h2>\\n<ul>\\n<li>数量比较少的hash、zset</li>\\n</ul>\\n<h2>ziplist数据结构</h2>\\n<p>ziplist是一个用一段特殊编码实现的双向链表，优势是占用内存小，可以存储字符串类型和整数类型。在内存布局中包含一下几个字段</p>\\n<ul>\\n<li>zlbytes：（4 bytes）整个链表占的内存字节数</li>\\n<li>zltail：（4 bytes）链表尾部节点的偏移量，存储这个信息的作用是实现反向遍历，因为需要知道尾部的地址才能从尾部向前遍历节点</li>\\n<li>zllen：（2 bytes）节点长度</li>\\n<li>entry：（n bytes）数据节点，数据节点包含3个结构，下面详细讲解</li>\\n<li>zlend：（1 bytes）结束标识符，固定是0xFF</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
