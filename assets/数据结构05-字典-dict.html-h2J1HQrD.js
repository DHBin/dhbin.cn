import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},e=t(`<h1 id="数据结构05-字典-dict" tabindex="-1"><a class="header-anchor" href="#数据结构05-字典-dict"><span>数据结构05-字典-dict</span></a></h1><p><img src="https://cdn.dhbin.cn/202303232006316.png" alt="img"></p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 字典中的键值对实体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 键 */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token comment">/* 值，共同体实现不同类型的存储 */</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>
        <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span>
        <span class="token keyword">double</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>
    <span class="token comment">/* 下一个实体 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 计算hash值的函数 */</span>
    <span class="token class-name">uint64_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 键复制函数 */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 值复制函数 */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 键对比函数 */</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 键内存回收函数（析构函数） */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 值内存回收函数（析构函数） */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 判断是否可以扩容 */</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>expandAllowed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> moreMem<span class="token punctuation">,</span> <span class="token keyword">double</span> usedRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictType<span class="token punctuation">;</span>

<span class="token comment">/* This is our hash table structure. Every dictionary has two of this as we
 * implement incremental rehashing, for the old to the new table. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 字典实体数组 */</span>
    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>
    <span class="token comment">/* table的大小 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>
    <span class="token comment">/* 恒等于size - 1 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>
    <span class="token comment">/* table中元素数量 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictht<span class="token punctuation">;</span>

<span class="token comment">/* 字典的结构体 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">/* 字典类型，封装了各种函数，多态实现 */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span> <span class="token comment">/* 可以理解成是扩展字段 */</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> rehashidx<span class="token punctuation">;</span> <span class="token comment">/* rehashing not in progress if rehashidx == -1 rehash的进度，当不是-1的时候，表示迁移至哪个table entry的下标 */</span>
    <span class="token class-name">int16_t</span> pauserehash<span class="token punctuation">;</span> <span class="token comment">/* If &gt;0 rehashing is paused (&lt;0 indicates coding error) 大于0表示rehash已停止，小于0表示出错，等于0表示正在迁移 */</span>
<span class="token punctuation">}</span> dict<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis的字典类似于java的hashmap，在我看来，redis的实现比hashmap简单很多。</p><h2 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节"><span>实现细节</span></a></h2><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><p>redis通过定义<code>dictType</code>结构体实现对hash函数、键复制函数、值复制函数、对比函数、键销毁函数、值销毁函数、是否允许扩展函数自定义。可以随意组合不同的算法。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><ul><li>rehashidx：rehash的进度，当不是-1的时候，表示数组下标</li><li>pauserehash：大于0表示rehash已停止，小于0表示出错，等于0表示正在迁移。在执行 BGSAVE 或 BGREWRITEAOF的时候，会把该值+1，表示暂停rehash</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Create a new hash table */</span>
dict <span class="token operator">*</span><span class="token function">dictCreate</span><span class="token punctuation">(</span>dictType <span class="token operator">*</span>type<span class="token punctuation">,</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>privDataPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 分配内存 */</span>
    dict <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 初始化hash表 */</span>
    <span class="token function">_dictInit</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>type<span class="token punctuation">,</span>privDataPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Initialize the hash table */</span>
<span class="token keyword">int</span> <span class="token function">_dictInit</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> dictType <span class="token operator">*</span>type<span class="token punctuation">,</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>privDataPtr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 初始化hash表1，置零 */</span>
    <span class="token function">_dictReset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 初始化hash表2，置零 */</span>
    <span class="token function">_dictReset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>privdata <span class="token operator">=</span> privDataPtr<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>rehashidx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>pauserehash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新增数据" tabindex="-1"><a class="header-anchor" href="#新增数据"><span>新增数据</span></a></h3><ul><li>如果是rehash状态，会迁移一个bucket（数组中的一个链表）</li><li>如果是rehash状态，那么新插入的数据会在ht[1]中</li><li>redis采用的是链地址法解决hash冲突</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Add an element to the target hash table */</span>
<span class="token keyword">int</span> <span class="token function">dictAdd</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span>entry <span class="token operator">=</span> <span class="token function">dictAddRaw</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>
    <span class="token function">dictSetVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


dictEntry <span class="token operator">*</span><span class="token function">dictAddRaw</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> dictEntry <span class="token operator">*</span><span class="token operator">*</span>existing<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> index<span class="token punctuation">;</span>
    dictEntry <span class="token operator">*</span>entry<span class="token punctuation">;</span>
    dictht <span class="token operator">*</span>ht<span class="token punctuation">;</span>

    <span class="token comment">/* 判断是否在rehash状态，是的话执行迁移1个bucket */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Get the index of the new element, or -1 if
     * the element already exists. */</span>
    <span class="token comment">/* 计算新插入元素的下标，如果key已经存在直接返回 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token function">_dictKeyIndex</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> existing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">/* Allocate the memory and store the new entry.
     * Insert the element in top, with the assumption that in a database
     * system it is more likely that recently added entries are accessed
     * more frequently. */</span>
    <span class="token comment">/* 判断字典是否在rehash，如果是的话，直接存进新的hash table中 */</span>
    ht <span class="token operator">=</span> <span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&amp;</span>d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">&amp;</span>d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    entry <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    entry<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ht<span class="token operator">-&gt;</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ht<span class="token operator">-&gt;</span>table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">;</span>
    ht<span class="token operator">-&gt;</span>used<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token comment">/* Set the hash entry fields. */</span>
    <span class="token function">dictSetKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> entry<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找数据" tabindex="-1"><a class="header-anchor" href="#查找数据"><span>查找数据</span></a></h3><ul><li>如果是rehash状态，会迁移一个bucket（数组中的一个链表）</li><li>遍历两个hash table判断key是否相同，相同的话就返回</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>dictEntry <span class="token operator">*</span><span class="token function">dictFind</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span>he<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> h<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> table<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictSize</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* dict is empty */</span>
    <span class="token comment">/* 如果是在rehash，迁移一个bucket */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    h <span class="token operator">=</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 下面的步骤就是从两个hash table中找出key的value */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>table <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> table <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> table<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        idx <span class="token operator">=</span> h <span class="token operator">&amp;</span> d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>sizemask<span class="token punctuation">;</span>
        he <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>he<span class="token operator">-&gt;</span>key <span class="token operator">||</span> <span class="token function">dictCompareKeys</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> he<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> he<span class="token punctuation">;</span>
            he <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h3><ul><li>如果是rehash状态，会迁移一个bucket（数组中的一个链表）</li><li>遍历删除</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Search and remove an element. This is an helper function for
 * dictDelete() and dictUnlink(), please check the top comment
 * of those functions. */</span>
<span class="token keyword">static</span> dictEntry <span class="token operator">*</span><span class="token function">dictGenericDelete</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> nofree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> h<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
    dictEntry <span class="token operator">*</span>he<span class="token punctuation">,</span> <span class="token operator">*</span>prevHe<span class="token punctuation">;</span>
    <span class="token keyword">int</span> table<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>used <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    h <span class="token operator">=</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>table <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> table <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> table<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        idx <span class="token operator">=</span> h <span class="token operator">&amp;</span> d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>sizemask<span class="token punctuation">;</span>
        he <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        prevHe <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>he<span class="token operator">-&gt;</span>key <span class="token operator">||</span> <span class="token function">dictCompareKeys</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> he<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/* Unlink the element from the list */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>prevHe<span class="token punctuation">)</span>
                    prevHe<span class="token operator">-&gt;</span>next <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nofree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">dictFreeKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> he<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">dictFreeVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> he<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">zfree</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                d<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> he<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            prevHe <span class="token operator">=</span> he<span class="token punctuation">;</span>
            he <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* not found */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩容策略-时机" tabindex="-1"><a class="header-anchor" href="#扩容策略-时机"><span>扩容策略（时机）</span></a></h3><p>必须满足以下所有条件才会执行扩容</p><ul><li>字典的元素总数量 大于 数组的长度</li><li>允许扩容（这里是一个字段控制的，redis的子进程在持久化的时候，也就是执行BGSAVE 或 BGREWRITEAOF的时候，会不允许扩容），或者当表中的元素总数量除于表的数组大小 &gt; 5的时候</li><li>自定义的判断是否允许扩容函数expandAllowed返回true，如果没有定义，默认返回true</li></ul><h3 id="渐进式rehash" tabindex="-1"><a class="header-anchor" href="#渐进式rehash"><span>渐进式rehash</span></a></h3><p>redis为了不要在rehash的时候做大量的数据迁移，设计了两个hash table。正常情况下，使用ht[0]，当需要扩容的时候会把ht[1]分配内存到扩容后的长度，在新增、查找、删除、替换等操作的时候会迁移一个数组中的bucket（桶），新插入的数据也直接插入到ht[1]中。等全部迁移完后把ht[1]移动到ht[0]，旧的ht[0]将释放内存。</p><h3 id="子进程持久化" tabindex="-1"><a class="header-anchor" href="#子进程持久化"><span>子进程持久化</span></a></h3><p>在执行<code>BGSAVE</code>、<code>BGREWRITEAOF</code>的时候，redis会fork一个子进程出来对redis的数据做持久化操作，那么持久化的动作与字典的操作就不是单线程了，为了最大化地利用系统的 copy on write 机制， 程序会暂时将 dict_can_resize 设为false（设置不允许扩容）， 避免执行rehash ，从而减少父子进程的数据复制。因为不是单线程的原因，在执行后台持久化操作的时候，新插入的数据可能不会被持久化。</p>`,27),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","数据结构05-字典-dict.html.vue"]]),d=JSON.parse('{"path":"/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8405-%E5%AD%97%E5%85%B8-dict.html","title":"数据结构05-字典-dict","lang":"zh-CN","frontmatter":{"date":"2021-12-06T22:14:00.000Z","category":["Redis"],"tag":["Redis","算法"],"description":"img","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8405-%E5%AD%97%E5%85%B8-dict.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"数据结构05-字典-dict"}],["meta",{"property":"og:description","content":"img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.dhbin.cn/202303232006316.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-23T12:17:45.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2021-12-06T22:14:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-23T12:17:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构05-字典-dict\\",\\"image\\":[\\"https://cdn.dhbin.cn/202303232006316.png\\"],\\"datePublished\\":\\"2021-12-06T22:14:00.000Z\\",\\"dateModified\\":\\"2023-03-23T12:17:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":2,"title":"实现细节","slug":"实现细节","link":"#实现细节","children":[{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"新增数据","slug":"新增数据","link":"#新增数据","children":[]},{"level":3,"title":"查找数据","slug":"查找数据","link":"#查找数据","children":[]},{"level":3,"title":"删除数据","slug":"删除数据","link":"#删除数据","children":[]},{"level":3,"title":"扩容策略（时机）","slug":"扩容策略-时机","link":"#扩容策略-时机","children":[]},{"level":3,"title":"渐进式rehash","slug":"渐进式rehash","link":"#渐进式rehash","children":[]},{"level":3,"title":"子进程持久化","slug":"子进程持久化","link":"#子进程持久化","children":[]}]}],"git":{"createdTime":1679573865000,"updatedTime":1679573865000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1651},"localizedDate":"2021年12月6日","excerpt":"\\n<p><img src=\\"https://cdn.dhbin.cn/202303232006316.png\\" alt=\\"img\\"></p>\\n","autoDesc":true}');export{k as comp,d as data};
