import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as s,b as n,d as i,e as a}from"./app-Ba--U_Af.js";const l={},u=a(`<h1 id="源码-调试redis" tabindex="-1"><a class="header-anchor" href="#源码-调试redis"><span>源码-调试Redis</span></a></h1><blockquote><p>在阅读源码的时候，通过debug调试的方式逐行去理解代码的意思，不免是一个好的方式。</p></blockquote><p>第一步：</p><p>在<code>src</code>目录下新建一个文件<code>learn.h</code>，在这里面定义入口</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">REDIS_LEARN_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">REDIS_LEARN_H</span></span>

<span class="token keyword">int</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//REDIS_LEARN_H</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义<code>learn.c</code>，例子：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;learn.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;quicklist.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ziplist.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;sds.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;server.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;dict.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">learn_sds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 压缩链表 */</span>
<span class="token keyword">void</span> <span class="token function">learn_ziplist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 快速链表 */</span>
<span class="token keyword">void</span> <span class="token function">learn_quicklist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 跳跃表 */</span>
<span class="token keyword">void</span> <span class="token function">learn_zsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 字典 */</span>
<span class="token keyword">void</span> <span class="token function">learn_dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 整数集合 */</span>
<span class="token keyword">void</span> <span class="token function">learn_intset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 紧凑列表 */</span>
<span class="token keyword">void</span> <span class="token function">learn_listpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// =========util=========</span>
<span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">randomStr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =========util=========</span>

<span class="token keyword">int</span> <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    learn_sds();</span>
<span class="token comment">//    learn_ziplist();</span>
    <span class="token comment">// learn_quicklist();</span>
<span class="token comment">//    learn_zsl();</span>
<span class="token comment">//    learn_dict();</span>
<span class="token comment">//    learn_intset();</span>
    <span class="token function">learn_listpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_sds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">&quot;dhb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sds: %s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_ziplist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 创建一个ziplist */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl <span class="token operator">=</span> <span class="token function">ziplistNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">&quot;dhbh&quot;</span><span class="token punctuation">;</span>
    zl <span class="token operator">=</span> <span class="token function">ziplistPush</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> ZIPLIST_HEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ss <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 长度大于等于254的情况 */</span>
    zl <span class="token operator">=</span> <span class="token function">ziplistPush</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ss<span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> ZIPLIST_HEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">ziplistLen</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ziplist len: %d\\n&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">ziplistIndex</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>vstr<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> vlen<span class="token punctuation">;</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> vlong<span class="token punctuation">;</span>
        <span class="token function">ziplistGet</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vstr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vlen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vlong<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vstr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;len : %d value: %s\\n&quot;</span><span class="token punctuation">,</span> vlen<span class="token punctuation">,</span> vstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;len : %d value: %lld\\n&quot;</span><span class="token punctuation">,</span> vlen<span class="token punctuation">,</span> vlong<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> <span class="token function">ziplistPrev</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_quicklist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    quicklist <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token function">quicklistCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//    quicklistPushHead(list, &quot;hello&quot;, 6);</span>
<span class="token comment">//    quicklistPushHead(list, &quot;xxx&quot;, 4);</span>
<span class="token comment">//    quicklistPushHead(list, &quot;xxxx&quot;, 5);</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">randomStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">quicklistPushHead</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token function">quicklistCount</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;快速链表的长度：%lu\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 快速链表迭代器 */</span>
    quicklistIter <span class="token operator">*</span>li <span class="token operator">=</span> <span class="token function">quicklistGetIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> AL_START_HEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
    quicklistEntry entry<span class="token punctuation">;</span>
    <span class="token comment">/* 遍历，取节点 */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">quicklistNext</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str: %s\\n&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_zsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    zskiplist <span class="token operator">*</span>zsl <span class="token operator">=</span> <span class="token function">zslCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">randomStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">zslInsert</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//    zslInsert(zsl, 10, sdsnew(&quot;10&quot;));</span>
<span class="token comment">//    zslInsert(zsl, 17, sdsnew(&quot;17&quot;));</span>
<span class="token comment">//    zslInsert(zsl, 500, sdsnew(&quot;500&quot;));</span>
<span class="token comment">//    zslInsert(zsl, 11, sdsnew(&quot;11&quot;));</span>
<span class="token comment">//    zslInsert(zsl, 1, sdsnew(&quot;1&quot;));</span>
<span class="token comment">//    zslInsert(zsl, 600, sdsnew(&quot;600&quot;));</span>



    zrangespec range<span class="token punctuation">;</span>
    range<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token number">985</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span>minex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span>maxex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    zskiplistNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">zslFirstInRange</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>
    zskiplistNode <span class="token operator">*</span>node1 <span class="token operator">=</span> <span class="token function">zslLastInRange</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dict <span class="token operator">*</span>myDict <span class="token operator">=</span> <span class="token function">dictCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hashDictType<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 空扩容 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;expand ret: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">dictExpand</span><span class="token punctuation">(</span>myDict<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 向字典添加数据，返回0代表成功，否则失败*/</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">dictAdd</span><span class="token punctuation">(</span>myDict<span class="token punctuation">,</span> <span class="token string">&quot;dhb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;want to add &#39;dhb&#39;-&gt; &#39;binary&#39; to dict. ret: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 根据key查找value值 */</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value <span class="token operator">=</span> <span class="token function">dictFetchValue</span><span class="token punctuation">(</span>myDict<span class="token punctuation">,</span> <span class="token string">&quot;dhb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value: %s\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 根据key查找value值，返回的是dictEntry */</span>
    dictEntry <span class="token operator">*</span>valueEntry <span class="token operator">=</span> <span class="token function">dictFind</span><span class="token punctuation">(</span>myDict<span class="token punctuation">,</span> <span class="token string">&quot;dhb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;key: %s\\n&quot;</span><span class="token punctuation">,</span> valueEntry<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value: %s\\n&quot;</span><span class="token punctuation">,</span> valueEntry<span class="token operator">-&gt;</span>v<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">learn_intset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    intset <span class="token operator">*</span>is <span class="token operator">=</span> <span class="token function">intsetNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> ret<span class="token punctuation">;</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;添加1到整数集合中的结果: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// int16 临界值</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> INT16_MAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 升级到int32</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> INT16_MAX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int32 临界值</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> INT32_MAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 升级到int64</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> INT32_MAX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 中间插入</span>
    is <span class="token operator">=</span> <span class="token function">intsetAdd</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">intsetFind</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;在整数集合中查找1的结果: %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * 紧凑链表的出现是为了解决压缩链表中更新链表的时候会出现级联更新的问题
 * */</span>
<span class="token keyword">void</span> <span class="token function">learn_listpack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>lp <span class="token operator">=</span> <span class="token function">lpNew</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lp <span class="token operator">=</span> <span class="token function">lpAppend</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lpLast</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lp <span class="token operator">=</span> <span class="token function">lpAppend</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len <span class="token operator">=</span> <span class="token function">lpLength</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;len: %d\\n&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>first <span class="token operator">=</span> <span class="token function">lpFirst</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ele: %s\\n&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    first <span class="token operator">=</span> <span class="token function">lpNext</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ele: %s\\n&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">randomStr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> chars <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    str<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        position <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">25</span><span class="token punctuation">;</span>
        str<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;====================\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：生成可执行文件，运行上面的代码</p>`,8),k=s("code",null,"src/Makefile",-1),r={href:"https://github.com/DHBin/redis/commit/1052b3e34bc94589d414fd2059728323f004573b",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>修改<code>src/server.c</code>，这里面包含了一个mian函数，程序的入口，其中有一段是这样子的</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>    <span class="token comment">/* Check if we need to start in redis-check-rdb/aof mode. We just execute
     * the program main. However the program is part of the Redis executable
     * so that we can easily execute an RDB check on loading errors. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;redis-check-rdb&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">redis_check_rdb_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;redis-check-aof&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">redis_check_aof_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码是判断可执行文件的名称从而去走不同的逻辑，所以我们可以加上走learn逻辑的代码，修改成一下内容</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>    <span class="token comment">/* Check if we need to start in redis-check-rdb/aof mode. We just execute
     * the program main. However the program is part of the Redis executable
     * so that we can easily execute an RDB check on loading errors. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;redis-check-rdb&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">redis_check_rdb_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;redis-check-aof&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">redis_check_aof_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;learn&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token function">learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function v(m,b){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("修改"),k,n("，这一步参考"),s("a",r,[n("chore: 修改调用learn的方式 · DHBin/redis@1052b3e (github.com)"),i(t)]),n("，不一一描述")]),d])}const y=p(l,[["render",v],["__file","源码-调试redis.html.vue"]]),g=JSON.parse('{"path":"/tech/redis/%E6%BA%90%E7%A0%81-%E8%B0%83%E8%AF%95redis.html","title":"源码-调试Redis","lang":"zh-CN","frontmatter":{"date":"2023-03-30T09:44:00.000Z","category":["Redis"],"tag":["源码","Redis"],"description":"在阅读源码的时候，通过debug调试的方式逐行去理解代码的意思，不免是一个好的方式。 第一步： 在src目录下新建一个文件learn.h，在这里面定义入口","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/redis/%E6%BA%90%E7%A0%81-%E8%B0%83%E8%AF%95redis.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"源码-调试Redis"}],["meta",{"property":"og:description","content":"在阅读源码的时候，通过debug调试的方式逐行去理解代码的意思，不免是一个好的方式。 第一步： 在src目录下新建一个文件learn.h，在这里面定义入口"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T02:48:50.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2023-03-30T09:44:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-30T02:48:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码-调试Redis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-30T09:44:00.000Z\\",\\"dateModified\\":\\"2023-03-30T02:48:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1680144530000,"updatedTime":1680144530000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1046},"localizedDate":"2023年3月30日","excerpt":"\\n<blockquote>\\n<p>在阅读源码的时候，通过debug调试的方式逐行去理解代码的意思，不免是一个好的方式。</p>\\n</blockquote>\\n<p>第一步：</p>\\n<p>在<code>src</code>目录下新建一个文件<code>learn.h</code>，在这里面定义入口</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">REDIS_LEARN_H</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">REDIS_LEARN_H</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">learn</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span> <span class=\\"token comment\\">//REDIS_LEARN_H</span></span>\\n\\n</code></pre></div>","autoDesc":true}');export{y as comp,g as data};
