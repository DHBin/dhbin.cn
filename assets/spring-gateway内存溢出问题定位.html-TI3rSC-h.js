import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},e=t(`<h1 id="spring-gateway堆外内存溢出问题定位" tabindex="-1"><a class="header-anchor" href="#spring-gateway堆外内存溢出问题定位"><span>Spring Gateway堆外内存溢出问题定位</span></a></h1><p>公司使用Spring Gateway作为业务网关，一直存在一个堆外内存泄露的疑难杂症。从同事手上接手过来后最终解决了这个问题。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h2><p>一般地，netty的堆外内存泄露可以通过加上<code>-Dio.netty.leakDetection.level=PARANOID</code>参数，然后去压测观察是否有打印内存泄露的情况，很不幸的是，我们尝试过没有效果，没有打印。</p><p>然后，因为jdk的版本很旧，尝试过升级jdk的版本，但是问题依旧</p><p>产线的有很多k8s集群，集群下的Gateway因为某些业务的原因独立给部署一套网关使用。通过观察，有些网关服务一个月都不会发生oom重启，有的甚至几个小时就会发生一次（得益于k8s的能力，基本上对业务无感）。</p><p>这里就比较有点意思了，观察经常oom的那个网关，发现这里的请求普遍响应数据比较大，这时就开始怀疑在网关与下游服务响应处理的代码是否存在内存泄露的问题了。</p><p>抓住这一点，在本地环境模拟这种情况。</p><h2 id="动手" tabindex="-1"><a class="header-anchor" href="#动手"><span>动手</span></a></h2><p>待补充</p><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h2><p>最终，定位到是以下代码导致了堆外内存泄露</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Oom</span> <span class="token keyword">extends</span> <span class="token class-name">ServerHttpResponseDecorator</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Oom</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpResponse</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Publisher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>flux<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dataBuffers <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DataBufferFactory</span> dataBufferFactory <span class="token operator">=</span> <span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DataBuffer</span> join <span class="token operator">=</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dataBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>join<span class="token punctuation">.</span><span class="token function">readableByteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            join<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DataBufferUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 忽略其他处理</span>
            <span class="token keyword">return</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>咋一看，似乎没有什么问题，新建的buffer也回收了。问题在哪呢，<code>flux.buffer()</code> buffer这个操作符的作用是把Flux的所有DataBuffer读取出来保存到List里面，关键源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span>FluxBuffer<span class="token punctuation">.</span>BufferExactSubscriber</span>#onNext

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onNextDropped</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">C</span> b <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            b <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>bufferSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;The bufferSupplier returned a null buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Context</span> ctx <span class="token operator">=</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onOperatorError</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onDiscard</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//this is in no buffer</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        buffer <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// b是一个列表，消费到的t会添加到b中</span>
    b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        actual<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，databuffer会被上面<code>dataBufferFactory.join</code>回收，但是，在请求被取消或者错误的情况下，并不会执行到<code>map</code>这个方法中，导致添加到List中的</p><p>Databuffer不能够被回收。</p><p>解决也很简单，继续看源码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span>FluxBuffer<span class="token punctuation">.</span>BufferExactSubscriber</span>#onError

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onErrorDropped</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    actual<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onDiscardMultiple</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onDiscardMultiple</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在取消或者出现错误的事件中，会把Databuffer回调给<code>onDiscard</code>事件，所以把代码改成如下就解决了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@NonNull</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Publisher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>flux<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dataBuffers <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">DataBufferFactory</span> dataBufferFactory <span class="token operator">=</span> <span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DataBuffer</span> join <span class="token operator">=</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dataBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>join<span class="token punctuation">.</span><span class="token function">readableByteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        join<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DataBufferUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 忽略其他处理</span>
        <span class="token keyword">return</span> dataBufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 监听discard事件，把Databuffer回收</span>
    <span class="token punctuation">.</span><span class="token function">doOnDiscard</span><span class="token punctuation">(</span><span class="token class-name">DataBuffer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DataBufferUtils</span><span class="token operator">::</span><span class="token function">release</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码其实只是解决了oom的问题，但是更要考虑的是为什么需要把所有的body读取出来，如果是做日志记录的话，应该需要对body的内容进行截断，因为body的大小是不可控的。</p><p>这需要从业务上去优化。</p>`,23),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","spring-gateway内存溢出问题定位.html.vue"]]),d=JSON.parse('{"path":"/tech/java/spring/spring-gateway%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D.html","title":"Spring Gateway堆外内存溢出问题定位","lang":"zh-CN","frontmatter":{"date":"2023-11-08T13:31:00.000Z","category":["Java"],"tag":["Spring","Spring Gateway"],"description":"公司使用Spring Gateway作为业务网关，一直存在一个堆外内存泄露的疑难杂症。从同事手上接手过来后最终解决了这个问题。","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/spring/spring-gateway%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Spring Gateway堆外内存溢出问题定位"}],["meta",{"property":"og:description","content":"公司使用Spring Gateway作为业务网关，一直存在一个堆外内存泄露的疑难杂症。从同事手上接手过来后最终解决了这个问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-08T07:25:57.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Spring Gateway"}],["meta",{"property":"article:published_time","content":"2023-11-08T13:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-08T07:25:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Gateway堆外内存溢出问题定位\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-08T13:31:00.000Z\\",\\"dateModified\\":\\"2023-11-08T07:25:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"动手","slug":"动手","link":"#动手","children":[]},{"level":2,"title":"解决","slug":"解决","link":"#解决","children":[]}],"git":{"createdTime":1699428357000,"updatedTime":1699428357000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":2.77,"words":832},"localizedDate":"2023年11月8日","excerpt":"\\n<p>公司使用Spring Gateway作为业务网关，一直存在一个堆外内存泄露的疑难杂症。从同事手上接手过来后最终解决了这个问题。</p>\\n","autoDesc":true}');export{k as comp,d as data};
