import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-Ba--U_Af.js";const p={},e=t(`<h1 id="java-string-intern方法" tabindex="-1"><a class="header-anchor" href="#java-string-intern方法"><span>Java String::intern方法</span></a></h1><p>了解一个方法的作用，最直接的方法就是看这个方法的 java doc</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Returns a canonical representation for the string object.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * A pool of strings, initially empty, is maintained privately by the
     * class <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">String</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * When the intern method is invoked, if the pool already contains a
     * string equal to this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">String</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> object as determined by
     * the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method, then the string from the pool is
     * returned. Otherwise, this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">String</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> object is added to the
     * pool and a reference to this <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">String</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> object is returned.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * It follows that for any two strings <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">s</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> and <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">t</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>,
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token code language-java"><span class="token operator">==</span></span><span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token code language-java">t<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>
     * if and only if <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * All literal strings and string-valued constant expressions are
     * interned. String literals are defined in <span class="token entity named-entity" title="§">&amp;sect;</span>3.10.5 of the
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/docs/books/jls/html/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Java Language
     * Specification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@return</span>  a string that has the same contents as this string, but is
     *          guaranteed to be from a pool of unique strings.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码块中得知，String::intern 方法是一个 native 方法，其底层实现是通过 c/cpp 实现的。当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals (Object) 方法确定），则返回池中的字符串。否则，将此 String 对象添加到池中，并返回此 String 对象的引用。 它遵循以下规则：对于任意两个字符串 s 和 t，当且仅当 s.equals (t) 为 true 时，s.intern () == t.intern () 才为 true。然而在 JDK6 与 JDK7 + 由于虚拟机的调整，<code>intern</code> 返回的对象有所不同。</p><blockquote><p>仅讨论 hotspot 的实现</p></blockquote><p>下面代码在 JDK6 与 JDK8 中会有不同的结果。</p><blockquote><p>&quot;java&quot; 在 <code>java.io.PrintStream.Version</code> 中出现过，在虚拟机启动时就加载到这个类。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> donghaibin
 * <span class="token keyword">@date</span> 2020/1/6
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InternTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;dhbin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;.cn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> builder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> builder1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;ja&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;va&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk6" tabindex="-1"><a class="header-anchor" href="#jdk6"><span>JDK6</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>false
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK6 还保留着永久代（对 JAVA 虚拟机规范中的方法区的实现），字符串常量池在永久代中。当执行 <code>intern</code> 方法时，首先判断永久代中字符串常量池中是否存在该字符串，如果存在返回字符串常量池中的字符串对象实例，否则复制首次出现的实例到字符串常量池，并返回。返回的字符串在永久代中，StringBuilder 创建的对象在堆中，所以是两个不同的对象。</p><h2 id="jdk8" tabindex="-1"><a class="header-anchor" href="#jdk8"><span>JDK8</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>true
false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK7 以后逐渐废除了永久代，把原本放在永久代的<strong>字符串常量池</strong>、<strong>静态变量</strong>等移至<strong>堆</strong>中，到了 JDK8 就完全废除了永久代，把 JDK7 中永久代还剩余的内容（主要是类信息）全部移到了<strong>元空间</strong>中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码之所以为 true，是因为字符串常量池就在堆中，首次出现就记录一下引用。因此 <code>intern</code> 返回的对象与 StringBuilder 创建出来的是同一个引用。</p>`,16),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","Java Stringintern方法.html.vue"]]),d=JSON.parse('{"path":"/tech/java/Java%20Stringintern%E6%96%B9%E6%B3%95.html","title":"Java String::intern方法","lang":"zh-CN","frontmatter":{"date":"2020-01-06T00:00:00.000Z","category":["Java"],"tag":["原理"],"description":"Java String::intern方法 了解一个方法的作用，最直接的方法就是看这个方法的 java doc 从上面代码块中得知，String::intern 方法是一个 native 方法，其底层实现是通过 c/cpp 实现的。当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals (Object) 方...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/Java%20Stringintern%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Java String::intern方法"}],["meta",{"property":"og:description","content":"Java String::intern方法 了解一个方法的作用，最直接的方法就是看这个方法的 java doc 从上面代码块中得知，String::intern 方法是一个 native 方法，其底层实现是通过 c/cpp 实现的。当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals (Object) 方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"原理"}],["meta",{"property":"article:published_time","content":"2020-01-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java String::intern方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"JDK6","slug":"jdk6","link":"#jdk6","children":[]},{"level":2,"title":"JDK8","slug":"jdk8","link":"#jdk8","children":[]}],"git":{"createdTime":1679506394000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":2.44,"words":733},"localizedDate":"2020年1月6日","excerpt":"\\n<p>了解一个方法的作用，最直接的方法就是看这个方法的 java doc</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>    <span class=\\"token doc-comment comment\\">/**\\n     * Returns a canonical representation for the string object.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * A pool of strings, initially empty, is maintained privately by the\\n     * class <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">String</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span>.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * When the intern method is invoked, if the pool already contains a\\n     * string equal to this <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">String</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> object as determined by\\n     * the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span> method, then the string from the pool is\\n     * returned. Otherwise, this <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">String</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> object is added to the\\n     * pool and a reference to this <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">String</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> object is returned.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * It follows that for any two strings <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\">s</span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> and <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\">t</span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span>,\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\">s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">intern</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token entity named-entity\\" title=\\"&nbsp;\\">&amp;nbsp;</span><span class=\\"token code language-java\\"><span class=\\"token operator\\">==</span></span><span class=\\"token entity named-entity\\" title=\\"&nbsp;\\">&amp;nbsp;</span><span class=\\"token code language-java\\">t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">intern</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> is <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * if and only if <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\">s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span> is <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>code</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token code-section\\"><span class=\\"token line\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>code</span><span class=\\"token punctuation\\">&gt;</span></span>.\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * All literal strings and string-valued constant expressions are\\n     * interned. String literals are defined in <span class=\\"token entity named-entity\\" title=\\"§\\">&amp;sect;</span>3.10.5 of the\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>http://java.sun.com/docs/books/jls/html/<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>Java Language\\n     * Specification<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token keyword\\">@return</span>  a string that has the same contents as this string, but is\\n     *          guaranteed to be from a pool of unique strings.\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">native</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">intern</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
