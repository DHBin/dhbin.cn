import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e}from"./app-Ba--U_Af.js";const t={},p=e(`<h1 id="解决redis集群内部ip问题" tabindex="-1"><a class="header-anchor" href="#解决redis集群内部ip问题"><span>解决redis集群内部ip问题</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>服务上云，内网的redis集群，通过ip映射的方式把redis的端口映射到公网（白名单），公网的机器通过lettuce等客户端连接的时候，lettuce客户端的集群模式是先通过cluster nodes 获取节点拓扑 ，在操作key的时候先通过算法定位到key在哪个节点，获取key如果重定向到其它节点的话，就会从对应的节点获取。这就会导致获取到的ip是内网的ip，公网连接不上的问题，以下是通过iptables的方式解决。</p><h2 id="验证环境" tabindex="-1"><a class="header-anchor" href="#验证环境"><span>验证环境</span></a></h2><p>使用docker创建3个redis，并关联成集群</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 生成3个redis</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">3</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\\</span>
<span class="token keyword">do</span> <span class="token punctuation">\\</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./node-<span class="token variable">\${port}</span>/conf
<span class="token function">touch</span> ./node-<span class="token variable">\${port}</span>/conf/redis.conf
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> ./node-<span class="token variable">\${port}</span>/conf/redis.conf</span>
port 800<span class="token variable">\${port}</span>
bind 0.0.0.0
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-announce-port 800<span class="token variable">\${port}</span>
cluster-announce-bus-port 1800<span class="token variable">\${port}</span>
appendonly yes
EOF</span>
<span class="token keyword">done</span>

<span class="token comment"># 运行3个redis</span>

<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-1 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-1/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-1/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 redis:5.0.12 redis-server /etc/redis/redis.conf

<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-2 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-2/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-2/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8002</span>:8002 redis:5.0.12 redis-server /etc/redis/redis.conf

<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-3 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-3/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/node-3/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8003</span>:8003 redis:5.0.12 redis-server /etc/redis/redis.conf


<span class="token comment"># 关联集群，ip以实际ip为准</span>
redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">172.17</span>.0.2:8001 <span class="token number">172.17</span>.0.3:8002 <span class="token number">172.17</span>.0.4:8003  --cluster-replicas <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip映射关系：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">10.8</span>.46.40:8001 -- <span class="token number">172.17</span>.0.2:8001
<span class="token number">10.8</span>.46.40:8002 -- <span class="token number">172.17</span>.0.3:8002
<span class="token number">10.8</span>.46.40:8002 -- <span class="token number">172.17</span>.0.4:8003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>在另一台机器（10.8.46.51）访问：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span> <span class="token function">host</span> redis redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-h</span> <span class="token number">10.8</span>.46.40 <span class="token parameter variable">-p</span> <span class="token number">8001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行get请求ip访问不通</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span> <span class="token function">host</span> redis redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-h</span> <span class="token number">10.8</span>.46.40 <span class="token parameter variable">-p</span> <span class="token number">8001</span>
<span class="token number">10.8</span>.46.40:800<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> get a
-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">15495</span><span class="token punctuation">]</span> located at <span class="token number">172.17</span>.0.4:8003
Could not connect to Redis at <span class="token number">172.17</span>.0.4:8003: No route to <span class="token function">host</span>
<span class="token punctuation">(</span><span class="token number">3</span>.05s<span class="token punctuation">)</span>
not connected<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加iptables规则</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.2 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8001</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">10.8</span>.46.40:8001
<span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.3 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8002</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">10.8</span>.46.40:8002
<span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-d</span> <span class="token number">172.17</span>.0.4 <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8003</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">10.8</span>.46.40:8003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-nvL</span> --line-number
Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>       <span class="token number">95</span>  <span class="token number">6219</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">0</span>     <span class="token number">0</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0           <span class="token operator">!</span><span class="token number">127.0</span>.0.0/8          ADDRTYPE match dst-type LOCAL
<span class="token number">2</span>        <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">172.17</span>.0.2           tcp dpt:8001 to:10.8.46.40:8001
<span class="token number">3</span>        <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">172.17</span>.0.3           tcp dpt:8002 to:10.8.46.40:8002
<span class="token number">4</span>        <span class="token number">0</span>     <span class="token number">0</span> DNAT       tcp  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">172.17</span>.0.4           tcp dpt:8003 to:10.8.46.40:8003

Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">6</span>   <span class="token number">360</span> MASQUERADE  all  --  *      <span class="token operator">!</span>docker0  <span class="token number">172.17</span>.0.0/16        <span class="token number">0.0</span>.0.0/0           

Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">0</span>     <span class="token number">0</span> RETURN     all  --  docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问正常，因为网络是通的了，就不需要访问10.8.46.40了，可以直接访问172.17.0.2</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span> <span class="token function">host</span> redis redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-h</span> <span class="token number">10.8</span>.46.40 <span class="token parameter variable">-p</span> <span class="token number">8001</span>
<span class="token number">10.8</span>.46.40:800<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> get a
-<span class="token operator">&gt;</span> Redirected to slot <span class="token punctuation">[</span><span class="token number">15495</span><span class="token punctuation">]</span> located at <span class="token number">172.17</span>.0.4:8003
<span class="token string">&quot;123&quot;</span>
<span class="token number">172.17</span>.0.4:800<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-nvL</span> --line-number
Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>       <span class="token number">95</span>  <span class="token number">6219</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         

Chain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">0</span>     <span class="token number">0</span> DOCKER     all  --  *      *       <span class="token number">0.0</span>.0.0/0           <span class="token operator">!</span><span class="token number">127.0</span>.0.0/8          ADDRTYPE match dst-type LOCAL

Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">6</span>   <span class="token number">360</span> MASQUERADE  all  --  *      <span class="token operator">!</span>docker0  <span class="token number">172.17</span>.0.0/16        <span class="token number">0.0</span>.0.0/0           

Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
num   pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         
<span class="token number">1</span>        <span class="token number">0</span>     <span class="token number">0</span> RETURN     all  --  docker0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),l=[p];function i(r,c){return n(),a("div",null,l)}const u=s(t,[["render",i],["__file","解决redis集群内部ip问题.html.vue"]]),b=JSON.parse('{"path":"/tech/redis/%E8%A7%A3%E5%86%B3redis%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8ip%E9%97%AE%E9%A2%98.html","title":"解决redis集群内部ip问题","lang":"zh-CN","frontmatter":{"date":"2023-07-28T20:11:00.000Z","category":["Redis"],"tag":["Redis","Iptables"],"description":"背景 服务上云，内网的redis集群，通过ip映射的方式把redis的端口映射到公网（白名单），公网的机器通过lettuce等客户端连接的时候，lettuce客户端的集群模式是先通过cluster nodes 获取节点拓扑 ，在操作key的时候先通过算法定位到key在哪个节点，获取key如果重定向到其它节点的话，就会从对应的节点获取。这就会导致获取到的...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/redis/%E8%A7%A3%E5%86%B3redis%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8ip%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"解决redis集群内部ip问题"}],["meta",{"property":"og:description","content":"背景 服务上云，内网的redis集群，通过ip映射的方式把redis的端口映射到公网（白名单），公网的机器通过lettuce等客户端连接的时候，lettuce客户端的集群模式是先通过cluster nodes 获取节点拓扑 ，在操作key的时候先通过算法定位到key在哪个节点，获取key如果重定向到其它节点的话，就会从对应的节点获取。这就会导致获取到的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T03:27:34.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"Iptables"}],["meta",{"property":"article:published_time","content":"2023-07-28T20:11:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T03:27:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解决redis集群内部ip问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-28T20:11:00.000Z\\",\\"dateModified\\":\\"2023-07-31T03:27:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"验证环境","slug":"验证环境","link":"#验证环境","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]}],"git":{"createdTime":1690774054000,"updatedTime":1690774054000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":2.93,"words":878},"localizedDate":"2023年7月28日","excerpt":"\\n<h2>背景</h2>\\n<p>服务上云，内网的redis集群，通过ip映射的方式把redis的端口映射到公网（白名单），公网的机器通过lettuce等客户端连接的时候，lettuce客户端的集群模式是先通过cluster nodes 获取节点拓扑 ，在操作key的时候先通过算法定位到key在哪个节点，获取key如果重定向到其它节点的话，就会从对应的节点获取。这就会导致获取到的ip是内网的ip，公网连接不上的问题，以下是通过iptables的方式解决。</p>\\n","autoDesc":true}');export{u as comp,b as data};
