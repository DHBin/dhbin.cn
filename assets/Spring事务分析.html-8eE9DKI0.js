import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-Ba--U_Af.js";const e={},o=t(`<h1 id="spring事务分析" tabindex="-1"><a class="header-anchor" href="#spring事务分析"><span>Spring事务分析</span></a></h1><h2 id="propagation" tabindex="-1"><a class="header-anchor" href="#propagation"><span>Propagation</span></a></h2><ul><li>REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。</li><li>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。</li><li>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。</li><li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</li></ul><p>Spring中默认Propagation是REQUIRED</p><h2 id="transactionsynchronizationmanager" tabindex="-1"><a class="header-anchor" href="#transactionsynchronizationmanager"><span>TransactionSynchronizationManager</span></a></h2><ul><li>getCurrentTransactionName: 获取当前事务名</li></ul><h2 id="事务失效情景" tabindex="-1"><a class="header-anchor" href="#事务失效情景"><span>事务失效情景</span></a></h2><h3 id="propagation配置失效" tabindex="-1"><a class="header-anchor" href="#propagation配置失效"><span>Propagation配置失效</span></a></h3><p>Spring的事务是基于Aop实现的，因为调用同一类下的方法会导致Aop失效，所以使用@Transactional配置同一个类下的不同方法，且嵌套调用，会导致配置失效。下面看个例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
	
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>期望是y方法被调用时会挂起当前事务，并新建事务。但是x中调用y情况就不一样了，因为Aop失效，y上配置的@Transactional就没有效果了，所以y并不会新建一个事务执行，而是走了x的事务。</p>`,11),i=[o];function p(c,l){return a(),s("div",null,i)}const d=n(e,[["render",p],["__file","Spring事务分析.html.vue"]]),g=JSON.parse('{"path":"/tech/java/spring/Spring%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90.html","title":"Spring事务分析","lang":"zh-CN","frontmatter":{"date":"2020-07-02T17:05:00.000Z","category":["Java"],"tag":["Spring"],"description":"Spring事务分析 Propagation REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 NOT_SU...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/spring/Spring%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Spring事务分析"}],["meta",{"property":"og:description","content":"Spring事务分析 Propagation REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 NOT_SU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2020-07-02T17:05:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring事务分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-02T17:05:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"Propagation","slug":"propagation","link":"#propagation","children":[]},{"level":2,"title":"TransactionSynchronizationManager","slug":"transactionsynchronizationmanager","link":"#transactionsynchronizationmanager","children":[]},{"level":2,"title":"事务失效情景","slug":"事务失效情景","link":"#事务失效情景","children":[{"level":3,"title":"Propagation配置失效","slug":"propagation配置失效","link":"#propagation配置失效","children":[]}]}],"git":{"createdTime":1679407002000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":2}]},"readingTime":{"minutes":1.28,"words":385},"localizedDate":"2020年7月2日","excerpt":"\\n<h2>Propagation</h2>\\n<ul>\\n<li>REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</li>\\n<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。</li>\\n<li>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。</li>\\n<li>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。</li>\\n<li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>\\n<li>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li>\\n<li>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</li>\\n</ul>","autoDesc":true}');export{d as comp,g as data};
