import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as p}from"./app-Ba--U_Af.js";const t={},e=p(`<h1 id="java-8-反射获取参数名" tabindex="-1"><a class="header-anchor" href="#java-8-反射获取参数名"><span>JAVA 8 反射获取参数名</span></a></h1><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>在JDK8之前javac编译是不会把构造器和方法的参数名编译进class中，如果需要获取参数名，可以在方法上加上注解，反射获取注解的值从而获取参数名，比如Jackson的*@JsonCreator<em>和</em>@JsonProperty* 。而JDK8新增了这一个功能，可以直接调用<em>java.lang.reflect.Parameter.getName()<em>获取到，前提是javac需要添加</em>-parameters</em>这个参数。通常来说不建议这样做，因为这会增大.class和在JVM中会占用更多的内存。</p><h1 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h1><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><p>直接上代码。</p><blockquote><p>用来打印类信息</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Parameter</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token static">out</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodParameterSpy</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span>  fmt <span class="token operator">=</span> <span class="token string">&quot;%24s: %s%n&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printClassConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allConstructors <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Number of constructors&quot;</span><span class="token punctuation">,</span> allConstructors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> currentConstructor <span class="token operator">:</span> allConstructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printConstructor</span><span class="token punctuation">(</span>currentConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allDeclConst <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Number of declared constructors&quot;</span><span class="token punctuation">,</span>
                allDeclConst<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> currentDeclConst <span class="token operator">:</span> allDeclConst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printConstructor</span><span class="token punctuation">(</span>currentDeclConst<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printClassMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allMethods <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Number of methods&quot;</span><span class="token punctuation">,</span> allMethods<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> allMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printConstructor</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Number of parameters&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printParameter</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Return type&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Generic return type&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Parameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printParameter</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printParameter</span><span class="token punctuation">(</span><span class="token class-name">Parameter</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Parameter class&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Parameter name&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Modifiers&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Is implicit?&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">isImplicit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Is name present?&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">isNamePresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token string">&quot;Is synthetic?&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">printClassConstructors</span><span class="token punctuation">(</span><span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printClassMethods</span><span class="token punctuation">(</span><span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>包含各种类型方法的类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleMethods</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringParam<span class="token punctuation">,</span> <span class="token keyword">int</span> intParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String: &quot;</span> <span class="token operator">+</span> stringParam <span class="token operator">+</span> <span class="token string">&quot;, integer: &quot;</span> <span class="token operator">+</span> intParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">varArgsMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> manyStrings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> manyStrings<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">methodWithList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> listParam<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">genericMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Length of array: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Size of collection: &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不带-parameters" tabindex="-1"><a class="header-anchor" href="#不带-parameters"><span>不带-parameters</span></a></h2><p>不带*-parameters*运行结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">Number</span> of constructors<span class="token operator">:</span> <span class="token number">1</span>
<span class="token keyword">public</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Number</span> of parameters<span class="token operator">:</span> <span class="token number">0</span>
<span class="token class-name">Number</span> of declared constructors<span class="token operator">:</span> <span class="token number">1</span>

# 构造器
<span class="token keyword">public</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Number</span> of parameters<span class="token operator">:</span> <span class="token number">0</span>
       <span class="token class-name">Number</span> of methods<span class="token operator">:</span> <span class="token number">4</span>
       
# 方法一
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg0
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">int</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg1
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           
# 方法二
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">methodWithList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg0
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>

# 方法三
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">genericMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">void</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">void</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">;</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg0
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg1
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>

# 方法四
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">varArgsMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">int</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">int</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> arg0
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出Parameter name全都是arg0~argN，因为参数名在编译期已经丢失了。Is name present为false。</p><h2 id="带-parameters" tabindex="-1"><a class="header-anchor" href="#带-parameters"><span>带-parameters</span></a></h2><blockquote><p>maven在pom.xml中添加</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgument</span><span class="token punctuation">&gt;</span></span>-parameters<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgument</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行在javc 后面加 -parameters</p><blockquote><p>运行结果</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token class-name">Number</span> of constructors<span class="token operator">:</span> <span class="token number">1</span>
<span class="token keyword">public</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Number</span> of parameters<span class="token operator">:</span> <span class="token number">0</span>
<span class="token class-name">Number</span> of declared constructors<span class="token operator">:</span> <span class="token number">1</span>

# 构造器
<span class="token keyword">public</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Number</span> of parameters<span class="token operator">:</span> <span class="token number">0</span>
       <span class="token class-name">Number</span> of methods<span class="token operator">:</span> <span class="token number">4</span>
           
# 方法一
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">methodWithList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> listParam
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>

# 方法二
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">varArgsMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">int</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">int</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> manyStrings
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>

# 方法三
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">genericMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">void</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">void</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">;</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> a
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> c
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
                                 
# 方法四
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">ExampleMethods</span><span class="token punctuation">.</span><span class="token function">simpleMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span>
             <span class="token class-name">Return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
     <span class="token class-name">Generic</span> <span class="token keyword">return</span> type<span class="token operator">:</span> <span class="token keyword">boolean</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> stringParam
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
         <span class="token class-name">Parameter</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token keyword">int</span>
          <span class="token class-name">Parameter</span> name<span class="token operator">:</span> intParam
               <span class="token class-name">Modifiers</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token class-name">Is</span> implicit<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token class-name">Is</span> name present<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span>
           <span class="token class-name">Is</span> synthetic<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就把参数名给打印出来了，Is name present为true。</p><h1 id="代码来源" tabindex="-1"><a class="header-anchor" href="#代码来源"><span>代码来源</span></a></h1><p>上述代码全部来自#参考资料中的<em>Obtaining Names of Method Parameters</em></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>[Obtaining Names of Method Parameters</p>`,25),o=[e];function c(l,i){return n(),a("div",null,o)}const k=s(t,[["render",c],["__file","JAVA8反射获取参数名.html.vue"]]),d=JSON.parse('{"path":"/tech/java/JAVA8%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D.html","title":"JAVA 8 反射获取参数名","lang":"zh-CN","frontmatter":{"date":"2018-08-21T13:22:00.000Z","category":["Java"],"description":"JAVA 8 反射获取参数名 前言 在JDK8之前javac编译是不会把构造器和方法的参数名编译进class中，如果需要获取参数名，可以在方法上加上注解，反射获取注解的值从而获取参数名，比如Jackson的*@JsonCreator和@JsonProperty* 。而JDK8新增了这一个功能，可以直接调用java.lang.reflect.Parame...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/JAVA8%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"JAVA 8 反射获取参数名"}],["meta",{"property":"og:description","content":"JAVA 8 反射获取参数名 前言 在JDK8之前javac编译是不会把构造器和方法的参数名编译进class中，如果需要获取参数名，可以在方法上加上注解，反射获取注解的值从而获取参数名，比如Jackson的*@JsonCreator和@JsonProperty* 。而JDK8新增了这一个功能，可以直接调用java.lang.reflect.Parame..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:published_time","content":"2018-08-21T13:22:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAVA 8 反射获取参数名\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-08-21T13:22:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"不带-parameters","slug":"不带-parameters","link":"#不带-parameters","children":[]},{"level":2,"title":"带-parameters","slug":"带-parameters","link":"#带-parameters","children":[]}],"git":{"createdTime":1679384580000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1},{"name":"donghaibin","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":3.2,"words":961},"localizedDate":"2018年8月21日","excerpt":"\\n<h1>前言</h1>\\n<p>在JDK8之前javac编译是不会把构造器和方法的参数名编译进class中，如果需要获取参数名，可以在方法上加上注解，反射获取注解的值从而获取参数名，比如Jackson的*@JsonCreator<em>和</em>@JsonProperty* 。而JDK8新增了这一个功能，可以直接调用<em>java.lang.reflect.Parameter.getName()<em>获取到，前提是javac需要添加</em>-parameters</em>这个参数。通常来说不建议这样做，因为这会增大.class和在JVM中会占用更多的内存。</p>\\n<h1>正文</h1>","autoDesc":true}');export{k as comp,d as data};
