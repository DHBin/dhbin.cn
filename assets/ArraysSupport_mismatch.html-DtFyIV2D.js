import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},e=t(`<h1 id="arrayssupport-mismatch" tabindex="-1"><a class="header-anchor" href="#arrayssupport-mismatch"><span>ArraysSupport#mismatch</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在研究elasticsearch排序插件的时候，自研的排序算法产生的数值远远大于64位数字的最大值，所以只能选择字符串排序。</p><h2 id="字符串数字排序" tabindex="-1"><a class="header-anchor" href="#字符串数字排序"><span>字符串数字排序</span></a></h2><p>字符串是按ASCII编码排序的，对于数字排序是存在问题的。比如有一下这些数字字符串：1、2、4、12、3，排序的结果就是1、12、2、3、4。这不符合数字排序的预期，这也正是原先在做solr的时候没有选择字符串排序的原因。在查询资料的时候，找到这个贴子 https://discuss.elastic.co/t/sorting-a-string-field-numerically/9489/7 其中提供了一种方法：把数字的位数追加到原数字的前面，追加的数字需要有占位符，比如已知最长的位数不超过100，追加的数字就是有两位，01、02、12这样。为什么需要这样呢？因为在对比字符串的原理是从0下标开始取出字符做对比，先取出位数做对比就能解决数字字符串排序的问题。</p><h2 id="排序优化" tabindex="-1"><a class="header-anchor" href="#排序优化"><span>排序优化</span></a></h2><p>elasticsearch把字符串类型统一存储为byte数组，所以字符串的对比实际上就是byte数组的对比。到这里，我产生了一个疑问，es的底层是怎么对比byte数组的？这关系到字符串排序的性能。脑子里的答案就是一个for循环遍历两个数组一一对比，最后发现在JDK8的确是这么实现的，但是es最低版本要求已经是jdk11，jdk9的时候就对数组的对比进行了优化。源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// 关键的代码在这里</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">ArraysSupport</span><span class="token punctuation">.</span><span class="token function">mismatch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>
                                       <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mismatch</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span>
                               <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span>
                               <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ISSUE: defer to index receiving methods if performance is good</span>
        <span class="token comment">// assert length &lt;= a.length</span>
        <span class="token comment">// assert length &lt;= b.length</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 因为long类型是8byte</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 关键代码在这</span>
            i <span class="token operator">=</span> <span class="token function">vectorizedMismatch</span><span class="token punctuation">(</span>
                    a<span class="token punctuation">,</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token constant">ARRAY_BYTE_BASE_OFFSET</span><span class="token punctuation">,</span>
                    b<span class="token punctuation">,</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token constant">ARRAY_BYTE_BASE_OFFSET</span><span class="token punctuation">,</span>
                    length<span class="token punctuation">,</span> <span class="token constant">LOG2_ARRAY_BYTE_INDEX_SCALE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token comment">// Align to tail</span>
            i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token operator">~</span>i<span class="token punctuation">;</span>
<span class="token comment">//            assert i &gt;= 0 &amp;&amp; i &lt;= 7;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Tail &lt; 8 bytes</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vectorizedMismatch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> aOffset<span class="token punctuation">,</span>
                                         <span class="token class-name">Object</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> bOffset<span class="token punctuation">,</span>
                                         <span class="token keyword">int</span> length<span class="token punctuation">,</span>
                                         <span class="token keyword">int</span> log2ArrayIndexScale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// assert a.getClass().isArray();</span>
        <span class="token comment">// assert b.getClass().isArray();</span>
        <span class="token comment">// assert 0 &lt;= length &lt;= sizeOf(a)</span>
        <span class="token comment">// assert 0 &lt;= length &lt;= sizeOf(b)</span>
        <span class="token comment">// assert 0 &lt;= log2ArrayIndexScale &lt;= 3</span>

        <span class="token keyword">int</span> log2ValuesPerWidth <span class="token operator">=</span> <span class="token constant">LOG2_ARRAY_LONG_INDEX_SCALE</span> <span class="token operator">-</span> log2ArrayIndexScale<span class="token punctuation">;</span>
        <span class="token keyword">int</span> wi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> wi <span class="token generics"><span class="token punctuation">&lt;</span> length <span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> log2ValuesPerWidth<span class="token punctuation">;</span> wi<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> bi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> wi<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">LOG2_ARRAY_LONG_INDEX_SCALE</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> av <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getLongUnaligned</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aOffset <span class="token operator">+</span> bi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> bv <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getLongUnaligned</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> bOffset <span class="token operator">+</span> bi<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> bv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> x <span class="token operator">=</span> av <span class="token operator">^</span> bv<span class="token punctuation">;</span>
                <span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token constant">BIG_ENDIAN</span>
                        <span class="token operator">?</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token constant">LOG2_BYTE_BIT_SIZE</span> <span class="token operator">+</span> log2ArrayIndexScale<span class="token punctuation">)</span>
                        <span class="token operator">:</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfTrailingZeros</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token constant">LOG2_BYTE_BIT_SIZE</span> <span class="token operator">+</span> log2ArrayIndexScale<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>wi <span class="token operator">&lt;&lt;</span> log2ValuesPerWidth<span class="token punctuation">)</span> <span class="token operator">+</span> o<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 省略其它代码...</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>分两种情况：</p><p>情况一：数组的长度小于8，直接for循环对比</p><p>情况二：数组长度大于等于8</p><p>我们知道数组在内存中是以一块连续的内存存储的，这样就可以把8bytes数据转成long类型来对比。假设一个数组的长度是24bytes，所以jdk8的方法时间复杂度是O(24)，jdk9的方法是O(24 / 8) = O(3)。减少了循环的次数。</p><p>那问题就来了，jdk是如何把byte[]转long类型的，在常规的开发没有这个操作呀，如果是for循环8次再转long，这复杂度也没有减低呀，确实，jdk采用了更骚的方法。Unsafe类，这个类如其名，是不安全的，能够像C/C++语言一样操作内存，上面使用到的关键API是<code>Unsafe#getLongUnaligned(java.lang.Object, long)</code>，参数1传入数组，参数2传入偏移量</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> dhb
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongOpt</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">UnsafeUtil</span><span class="token punctuation">.</span><span class="token constant">UNSAFE</span><span class="token punctuation">;</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">&quot;0200000001000000&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Unsafe.ARRAY_BYTE_BASE_OFFSET是数组头部数据大小，把这个加上就是数组元素的初始位置</span>
        <span class="token keyword">long</span> l1 <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token constant">ARRAY_BYTE_BASE_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// +8的原因是long的长度是8个字节</span>
        <span class="token keyword">long</span> l2 <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token constant">ARRAY_BYTE_BASE_OFFSET</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3472328296227680816</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3472328296227680560</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取数的问题解决了，还有另一个问题：怎么定位到是那一个下标元素不同的？</p><p>02000000</p><p>01000000</p><p>上面两组字符串，用肉眼看就知道是第二位不同，但当转成了long类型，是怎么找出是第二位的呢？答案是两个数异或运算之后，大端序从左往右，小端序从右往左（内存存储大小端不清楚的可以百度了解下），零的个数就是下标位置，比如<code>02000000 ^ 01000000</code>的结果是<code>01000000</code>这是大端存储顺序，下标就是1，就能快速定位到不同的元素取出对比。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>过长的数字除了可以使用BigInteger以外，还可以采用追加位数的方式</li><li>对比数组可以取更多的元素对比，提前结束</li><li>Unsafe类的运用，这个还有很多更强大的功能，在开发中如果非必要不要轻易使用。</li></ul>`,21),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","ArraysSupport_mismatch.html.vue"]]),d=JSON.parse('{"path":"/tech/java/ArraysSupport_mismatch.html","title":"ArraysSupport#mismatch","lang":"zh-CN","frontmatter":{"date":"2022-07-15T10:21:00.000Z","category":["Java"],"tag":["算法"],"description":"ArraysSupport#mismatch 前言 在研究elasticsearch排序插件的时候，自研的排序算法产生的数值远远大于64位数字的最大值，所以只能选择字符串排序。 字符串数字排序 字符串是按ASCII编码排序的，对于数字排序是存在问题的。比如有一下这些数字字符串：1、2、4、12、3，排序的结果就是1、12、2、3、4。这不符合数字排序的...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/ArraysSupport_mismatch.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"ArraysSupport#mismatch"}],["meta",{"property":"og:description","content":"ArraysSupport#mismatch 前言 在研究elasticsearch排序插件的时候，自研的排序算法产生的数值远远大于64位数字的最大值，所以只能选择字符串排序。 字符串数字排序 字符串是按ASCII编码排序的，对于数字排序是存在问题的。比如有一下这些数字字符串：1、2、4、12、3，排序的结果就是1、12、2、3、4。这不符合数字排序的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2022-07-15T10:21:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ArraysSupport#mismatch\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-15T10:21:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"字符串数字排序","slug":"字符串数字排序","link":"#字符串数字排序","children":[]},{"level":2,"title":"排序优化","slug":"排序优化","link":"#排序优化","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1679407002000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":2}]},"readingTime":{"minutes":4.17,"words":1252},"localizedDate":"2022年7月15日","excerpt":"\\n<h2>前言</h2>\\n<p>在研究elasticsearch排序插件的时候，自研的排序算法产生的数值远远大于64位数字的最大值，所以只能选择字符串排序。</p>\\n<h2>字符串数字排序</h2>\\n<p>字符串是按ASCII编码排序的，对于数字排序是存在问题的。比如有一下这些数字字符串：1、2、4、12、3，排序的结果就是1、12、2、3、4。这不符合数字排序的预期，这也正是原先在做solr的时候没有选择字符串排序的原因。在查询资料的时候，找到这个贴子 https://discuss.elastic.co/t/sorting-a-string-field-numerically/9489/7 其中提供了一种方法：把数字的位数追加到原数字的前面，追加的数字需要有占位符，比如已知最长的位数不超过100，追加的数字就是有两位，01、02、12这样。为什么需要这样呢？因为在对比字符串的原理是从0下标开始取出字符做对比，先取出位数做对比就能解决数字字符串排序的问题。</p>","autoDesc":true}');export{k as comp,d as data};
