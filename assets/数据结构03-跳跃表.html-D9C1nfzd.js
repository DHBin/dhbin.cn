import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-Ba--U_Af.js";const p={},t=e(`<h1 id="数据结构03-跳跃表" tabindex="-1"><a class="header-anchor" href="#数据结构03-跳跃表"><span>数据结构03-跳跃表</span></a></h1><h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><p><img src="https://cdn.dhbin.cn/1636076900671-ccb3ee8c-4459-4dba-ab92-be47e480c140.jpeg" alt="img"></p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h2><p>跳表是一个非常优秀的数据结构，优秀在性能媲美红黑树，优秀在实现起来比红黑树简单（跳表实现也不是很简单）。在一个有序的数组中，我们可以使用二分查找来定位节点的位置，但在普通的链表中则不能，需要把链表从头到尾遍历一个，时间复杂度是O(n)。实际上，我们在链表的基础上做一点改造就能实现类似二分查找的数据结构，这就是链表。</p><p>普通的链表数据结构如下：</p><p><img src="https://cdn.dhbin.cn/1636077557337-92c5a928-add9-4137-84c3-175f5cff023e.jpeg" alt="img"></p><p>跳跃表就是把单链表改成了多链表组合而成的数据结构，如下：</p><p><img src="https://cdn.dhbin.cn/1636077704280-5edda0bf-4e95-4547-904b-9a68cb7aeeea.jpeg" alt="img"></p><p>这么一来，在链表中查找节点的性能就提高了，怎么体现呢？以上面的图为例子，我需要查找node5节点</p><p>在普通的链表中，链路是这样的：</p><p>node1 -&gt; node2 -&gt; node3 -&gt; node4 -&gt; node5，经过4个节点。</p><p>在跳表中，链路是这样的：</p><p>node1 -&gt; node3 -&gt; node4 -&gt; node5，经过3个节点。</p><p>可以看出跳表通过不同层级的表之间的跳跃，实现节点间不连续，从而加速了链表的查找性能，在上面的例子中可能体现不是很明显，但在数据量大的情况下，效果会非常明显，能达到类似二分查找的效果。</p><h2 id="redis实现" tabindex="-1"><a class="header-anchor" href="#redis实现"><span>redis实现</span></a></h2><p>如果能理解上面的原理，实现一个跳表不难了，从单链表向多链表改写，处理节点间的关系</p><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 节点数据 */</span>
    sds ele<span class="token punctuation">;</span>
    <span class="token comment">/* 分值 */</span>
    <span class="token keyword">double</span> score<span class="token punctuation">;</span>
    <span class="token comment">/* 上一个节点 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>
        <span class="token comment">/* 距离下一个节点的间隔，遍历下去可以知道某个节点在什么位置 */</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> span<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 首尾节点 */</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token comment">/* 链表长度 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>
    <span class="token comment">/* 等级 */</span>
    <span class="token keyword">int</span> level<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机层级" tabindex="-1"><a class="header-anchor" href="#随机层级"><span>随机层级</span></a></h3><p>在插入一个节点的时候，会通过一个随机函数来决定该节点的层级，如是2层，这节点就会在两个层级中出现，先上图的node4节点。</p><p>随机层级的算法</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">zslRandomLevel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* ZSKIPLIST_P是0.25
       ZSKIPLIST_MAXLEVEL是32，层级最大是32层
    */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>ZSKIPLIST_P <span class="token operator">*</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        level <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>level<span class="token operator">&lt;</span>ZSKIPLIST_MAXLEVEL<span class="token punctuation">)</span> <span class="token operator">?</span> level <span class="token operator">:</span> ZSKIPLIST_MAXLEVEL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>while</code>中的条件<code>random()&amp;&amp;0xFFFF</code>产生一个<code>0xFFFF</code>范围内的数字，判断是否小于<code>0.25 * 0xFFFF</code>，如果小于level+1。这里就是随机造层的核心算法</p><p>&quot;幂次法则&quot;也叫“80-20法则”，由经济学家维尔弗雷多.帕累托在1906年提出，他认为：在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的。--百度百科</p><p>利用幂次法则（二八定理）来产生level，层级越高几率越小。</p><h3 id="插入逻辑" tabindex="-1"><a class="header-anchor" href="#插入逻辑"><span>插入逻辑</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Insert a new node in the skiplist. Assumes the element does not already
 * exist (up to the caller to enforce that). The skiplist takes ownership
 * of the passed SDS string &#39;ele&#39;.
 * 步骤：
 * 1、找出每个层级插入的位置
 * 2、根据次幂法则随机生成新插入的节点的层级
 * 3、遍历生成的层级在对应位置插入节点
 * 4、更新节点的间隔
 * 5、赋值新增节点的上一个节点(backward)
 * 6、更新链表长度
 * */</span>
zskiplistNode <span class="token operator">*</span><span class="token function">zslInsert</span><span class="token punctuation">(</span>zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> sds ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* update的作用是记录在每一层插入的位置 */</span>
    zskiplistNode <span class="token operator">*</span>update<span class="token punctuation">[</span>ZSKIPLIST_MAXLEVEL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>x<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> rank<span class="token punctuation">[</span>ZSKIPLIST_MAXLEVEL<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> level<span class="token punctuation">;</span>

    <span class="token function">serverAssert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isnan</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>header<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* store rank that is crossed to reach the insert position */</span>
        rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>zsl<span class="token operator">-&gt;</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> rank<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">/* 当前节点的分数小于新增的分数 或者 （当前节点的分数等于新增的分数 并且 当前节点数据小于新增节点数据）
         * 这个while循环的作用是记录间隔 和 找出插入新节点的位置
         * */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>score <span class="token operator">&lt;</span> score <span class="token operator">||</span>
                    <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>score <span class="token operator">==</span> score <span class="token operator">&amp;&amp;</span>
                    <span class="token function">sdscmp</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>ele<span class="token punctuation">,</span>ele<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 记录层级的间隔 */</span>
            rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span<span class="token punctuation">;</span>
            <span class="token comment">/* 指向下一个节点继续上面的逻辑 */</span>
            x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 最靠近需要插入节点的分数的节点 */</span>
        update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* we assume the element is not already inside, since we allow duplicated
     * scores, reinserting the same element should never happen since the
     * caller of zslInsert() should test in the hash table if the element is
     * already inside or not. */</span>
    <span class="token comment">/* 次幂法则（二八法则）level越大出现的机率越小 */</span>
    level <span class="token operator">=</span> <span class="token function">zslRandomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 随机生成的层级大于原来的层级 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&gt;</span> zsl<span class="token operator">-&gt;</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 把新的层级节点都指向头部 */</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>level<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>header<span class="token punctuation">;</span>
            <span class="token comment">/* 间隔是链表的长度，因为是新的一层，间隔就是链表的长度 */</span>
            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        zsl<span class="token operator">-&gt;</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* x是新建的节点 */</span>
    x <span class="token operator">=</span> <span class="token function">zslCreateNode</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span>score<span class="token punctuation">,</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
     * 新增节点：x
     * 原来有的节点：o
     *
     * o - o 循环后在两个o之间插入x，变成
     * o - x - o
     * */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 这一步相当于把原来节点的下一个节点 分配给 新的节点的下一个节点 */</span>
        x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">=</span> update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
        <span class="token comment">/* 原来节点的下一个节点 指向 新建节点 */</span>
        update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token comment">/* == 这里注意一下，新增节点的上一个还没有赋值 == */</span>

        <span class="token comment">/* update span covered by update[i] as x is inserted here */</span>
        <span class="token comment">/* 更新span */</span>
        x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span <span class="token operator">=</span> update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span <span class="token operator">-</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span <span class="token operator">=</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* increment span for untouched levels 把level以上的层级span+1，因为上面的循环没有更新到level以上的层级 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> level<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> zsl<span class="token operator">-&gt;</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>span<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
     * ==在这里给新增节点的上一个赋值==
     * 给新的节点关联上一个节点，为什么是update[0]？因为第1层的间隔是1，update[0]就是这个
     * 新增节点的上一个
     * */</span>
    x<span class="token operator">-&gt;</span>backward <span class="token operator">=</span> <span class="token punctuation">(</span>update<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> zsl<span class="token operator">-&gt;</span>header<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">NULL</span> <span class="token operator">:</span> update<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* 如果第1层的下一个节点不为空（在链表的节点间插入值，比如在10与12之间插入11） */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">)</span>
        <span class="token comment">/* 更新节点的上一个节点 */</span>
        x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>backward <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token comment">/* 为空的话说明是在尾部插入，把链表的tail指向新的节点 */</span>
        zsl<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token comment">/* 长度+1 */</span>
    zsl<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找逻辑" tabindex="-1"><a class="header-anchor" href="#查找逻辑"><span>查找逻辑</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>zskiplistNode <span class="token operator">*</span><span class="token function">zslFirstInRange</span><span class="token punctuation">(</span>zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">,</span> zrangespec <span class="token operator">*</span>range<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    zskiplistNode <span class="token operator">*</span>x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token comment">/* If everything is out of range, return early. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">zslIsInRange</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    x <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>header<span class="token punctuation">;</span>
    <span class="token comment">/* 大概的意思就是从跳表的最高层级开始遍历，在同一层级中不断取下一个节点的
     * 分数来判断是否小于区间的最小值，如果成立，继续遍历这个节点的下一个层级
     * 重复上面的逻辑，直到把所有层级遍历完
     *
     * 作用：从大往小缩进，取到在区间范围内的最小值
     * */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Go forward while *OUT* of range. */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">&amp;&amp;</span>
            <span class="token operator">!</span><span class="token function">zslValueGteMin</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>score<span class="token punctuation">,</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span>
                x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* This is an inner range, so the next node cannot be NULL. */</span>
    x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
    <span class="token function">serverAssert</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check if score &lt;= max. */</span>
    <span class="token comment">/* 判断分数是否大于最大值 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">zslValueLteMax</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>score<span class="token punctuation">,</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除逻辑" tabindex="-1"><a class="header-anchor" href="#删除逻辑"><span>删除逻辑</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">zslDelete</span><span class="token punctuation">(</span>zskiplist <span class="token operator">*</span>zsl<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> sds ele<span class="token punctuation">,</span> zskiplistNode <span class="token operator">*</span><span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    zskiplistNode <span class="token operator">*</span>update<span class="token punctuation">[</span>ZSKIPLIST_MAXLEVEL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    x <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>header<span class="token punctuation">;</span>
    <span class="token comment">/* 从高到低遍历每个层级 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> zsl<span class="token operator">-&gt;</span>level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
         * 满足一下条件，指针向前移动：
         * 1、层级的下一个节点(x)不为空
         * 2、x的分值小于传进来的分值，或者分值相等的情况下，x的数据
         * 字节长度小于传进来的数据的字节长度
         * */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>score <span class="token operator">&lt;</span> score <span class="token operator">||</span>
                    <span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>score <span class="token operator">==</span> score <span class="token operator">&amp;&amp;</span>
                     <span class="token function">sdscmp</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token operator">-&gt;</span>ele<span class="token punctuation">,</span>ele<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* We may have multiple elements with the same score, what we need
     * is to find the element with both the right score and object. */</span>
    x <span class="token operator">=</span> x<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
    <span class="token comment">/* 因为在一个链表中可能有有多个分值相同的节点，在分值相同的情况下，还需要对比数据 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> score <span class="token operator">==</span> x<span class="token operator">-&gt;</span>score <span class="token operator">&amp;&amp;</span> <span class="token function">sdscmp</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>ele<span class="token punctuation">,</span>ele<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 删除节点 */</span>
        <span class="token function">zslDeleteNode</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span> x<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>
            <span class="token comment">/* 回收内存 */</span>
            <span class="token function">zslFreeNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token operator">*</span>node <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* not found */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>跳表相对于普通的链表来说，性能是提高了，但是占用的内存更多。使用空间换时间的设计思路，通过构建多级索引来提升查询性能，支持快速地插入、删除、查找操作，时间复杂度都是O(logn)。在JAVA中没有默认的跳表实现，可以动手实现一下。</p>`,34),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","数据结构03-跳跃表.html.vue"]]),d=JSON.parse('{"path":"/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403-%E8%B7%B3%E8%B7%83%E8%A1%A8.html","title":"数据结构03-跳跃表","lang":"zh-CN","frontmatter":{"date":"2021-12-06T22:12:00.000Z","category":["Redis"],"tag":["Redis","算法"],"description":"数据结构03-跳跃表 总览 img 分析 跳表是一个非常优秀的数据结构，优秀在性能媲美红黑树，优秀在实现起来比红黑树简单（跳表实现也不是很简单）。在一个有序的数组中，我们可以使用二分查找来定位节点的位置，但在普通的链表中则不能，需要把链表从头到尾遍历一个，时间复杂度是O(n)。实际上，我们在链表的基础上做一点改造就能实现类似二分查找的数据结构，这就是链...","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403-%E8%B7%B3%E8%B7%83%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"数据结构03-跳跃表"}],["meta",{"property":"og:description","content":"数据结构03-跳跃表 总览 img 分析 跳表是一个非常优秀的数据结构，优秀在性能媲美红黑树，优秀在实现起来比红黑树简单（跳表实现也不是很简单）。在一个有序的数组中，我们可以使用二分查找来定位节点的位置，但在普通的链表中则不能，需要把链表从头到尾遍历一个，时间复杂度是O(n)。实际上，我们在链表的基础上做一点改造就能实现类似二分查找的数据结构，这就是链..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.dhbin.cn/1636076900671-ccb3ee8c-4459-4dba-ab92-be47e480c140.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-23T12:17:45.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2021-12-06T22:12:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-23T12:17:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构03-跳跃表\\",\\"image\\":[\\"https://cdn.dhbin.cn/1636076900671-ccb3ee8c-4459-4dba-ab92-be47e480c140.jpeg\\",\\"https://cdn.dhbin.cn/1636077557337-92c5a928-add9-4137-84c3-175f5cff023e.jpeg\\",\\"https://cdn.dhbin.cn/1636077704280-5edda0bf-4e95-4547-904b-9a68cb7aeeea.jpeg\\"],\\"datePublished\\":\\"2021-12-06T22:12:00.000Z\\",\\"dateModified\\":\\"2023-03-23T12:17:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[{"level":2,"title":"总览","slug":"总览","link":"#总览","children":[]},{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"redis实现","slug":"redis实现","link":"#redis实现","children":[{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"随机层级","slug":"随机层级","link":"#随机层级","children":[]},{"level":3,"title":"插入逻辑","slug":"插入逻辑","link":"#插入逻辑","children":[]},{"level":3,"title":"查找逻辑","slug":"查找逻辑","link":"#查找逻辑","children":[]},{"level":3,"title":"删除逻辑","slug":"删除逻辑","link":"#删除逻辑","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1679573865000,"updatedTime":1679573865000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":7.45,"words":2236},"localizedDate":"2021年12月6日","excerpt":"\\n<h2>总览</h2>\\n<p><img src=\\"https://cdn.dhbin.cn/1636076900671-ccb3ee8c-4459-4dba-ab92-be47e480c140.jpeg\\" alt=\\"img\\"></p>\\n<h2>分析</h2>\\n<p>跳表是一个非常优秀的数据结构，优秀在性能媲美红黑树，优秀在实现起来比红黑树简单（跳表实现也不是很简单）。在一个有序的数组中，我们可以使用二分查找来定位节点的位置，但在普通的链表中则不能，需要把链表从头到尾遍历一个，时间复杂度是O(n)。实际上，我们在链表的基础上做一点改造就能实现类似二分查找的数据结构，这就是链表。</p>\\n<p>普通的链表数据结构如下：</p>","autoDesc":true}');export{k as comp,d as data};
