import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Ba--U_Af.js";const p={},e=t(`<h1 id="linux-dump内存" tabindex="-1"><a class="header-anchor" href="#linux-dump内存"><span>Linux dump内存</span></a></h1><blockquote><p>在分析netty堆外内存泄漏的时候，想查看堆外内存存储了些什么，所以写了这个小工具。确实gdb也可以实现，但gdb会处理其它信号，可能会影响程序的正常运行。生产配合arthas一起食用</p></blockquote><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ptrace.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">long_size</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;usages:\\n\\tdump pid addr_offset bytes_len\\nexmaple:\\n\\tdump 1 0xfab00113868 10\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> addr <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> bytes_len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_ATTACH<span class="token punctuation">,</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> chars<span class="token punctuation">[</span>bytes_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> bytes_len <span class="token operator">/</span> long_size<span class="token punctuation">;</span>
  <span class="token keyword">int</span> copyed_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> offset<span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    offset <span class="token operator">=</span> long_size <span class="token operator">*</span> i<span class="token punctuation">;</span>
    <span class="token keyword">long</span> buff <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKTEXT<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> addr <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buff <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>errno<span class="token punctuation">)</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;err: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>chars <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buff<span class="token punctuation">,</span> long_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    copyed_size <span class="token operator">+=</span> long_size<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>copyed_size <span class="token operator">&lt;</span> bytes_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    offset <span class="token operator">=</span> long_size <span class="token operator">*</span> count<span class="token punctuation">;</span>
    <span class="token keyword">long</span> buff <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKTEXT<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> addr <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buff <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>errno<span class="token punctuation">)</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;err: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>chars <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buff<span class="token punctuation">,</span> bytes_len <span class="token operator">-</span> copyed_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> bytes_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_DETACH<span class="token punctuation">,</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token target symbol">all</span><span class="token punctuation">:</span>
        gcc dump.c -static -o dump

<span class="token target symbol">clean</span><span class="token punctuation">:</span>
        rm ./dump
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.dhbin.cn/linux_dump_mem.jpg" alt="linux_dump_mem"></p>`,5),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Linux dump内存.html.vue"]]),d=JSON.parse('{"path":"/tech/linux/Linux%20dump%E5%86%85%E5%AD%98.html","title":"Linux dump内存","lang":"zh-CN","frontmatter":{"date":"2022-10-25T14:31:00.000Z","category":["Linux"],"tag":["Linux"],"description":"在分析netty堆外内存泄漏的时候，想查看堆外内存存储了些什么，所以写了这个小工具。确实gdb也可以实现，但gdb会处理其它信号，可能会影响程序的正常运行。生产配合arthas一起食用","head":[["meta",{"property":"og:url","content":"https://dhbin.cn/tech/linux/Linux%20dump%E5%86%85%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Linux dump内存"}],["meta",{"property":"og:description","content":"在分析netty堆外内存泄漏的时候，想查看堆外内存存储了些什么，所以写了这个小工具。确实gdb也可以实现，但gdb会处理其它信号，可能会影响程序的正常运行。生产配合arthas一起食用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.dhbin.cn/linux_dump_mem.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:author","content":"DHB"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2022-10-25T14:31:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux dump内存\\",\\"image\\":[\\"https://cdn.dhbin.cn/linux_dump_mem.jpg\\"],\\"datePublished\\":\\"2022-10-25T14:31:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1679384580000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","email":"xx158@qq.com","commits":2},{"name":"donghaibin","email":"xx158@qq.com","commits":1}]},"readingTime":{"minutes":0.89,"words":267},"localizedDate":"2022年10月25日","excerpt":"\\n<blockquote>\\n<p>在分析netty堆外内存泄漏的时候，想查看堆外内存存储了些什么，所以写了这个小工具。确实gdb也可以实现，但gdb会处理其它信号，可能会影响程序的正常运行。生产配合arthas一起食用</p>\\n</blockquote>\\n","autoDesc":true}');export{k as comp,d as data};
